[
  {
    "pageContent": "<path>Optimizing performance, Write performant requests, Batch API calls to make parallel requests</path>\n# Optimizing performance\nYou can optimize your app to make it run faster, use resources more efficiently, and create a better user experience. Here’s how.\n## Always use the latest public-api\nTo update your app to use the latest version of the public API:\n-   Run `npm install -g devvit` to update the Devvit CLI globally.\n    \n-   In your project directory, run the following commands:\n-   `devvit update app`\n-   `npm install`\n:::note You must update the CLI before you upgrade @devvit/public-api in your project. :::\n## Write performant requests\nThese best practices will optimize your app.\n### Get as much data as possible from the context\nIf you only need the name of the current user:\n-   Avoid requests like `getCurrentUser()` or `getUserById(context.userId)`.\n-   Use `getCurrentUsername()` instead.\nIf you only need the subreddit name:\n-   Don’t request the whole Subreddit model with `getCurrentSubreddit()`.\n-   Use `getCurrentSubredditName()` instead.\n### Cache requests to RedditAPI or external resources\nUse `context.cache` to reduce the amount of requests to optimize performance and running costs of your application. See [cache helper](./capabilities/cache.md) for details and examples.\n### Leverage scheduled jobs to fetch or update data\nUse [scheduler](./capabilities/scheduler.md) to make large data requests in the background and store it in [Redis](./capabilities/redis.md) for later use. You can also [fetch data for multiple users](#how-to-use-the-cache-helper%E2%80%8B).\n### Batch API calls to make parallel requests\nEvery request defined in `useState` is blocking the render function. You can improve app performance by [making parallel requests](#how-to-make-parallel-requests).",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Optimizing performance",
        "Write performant requests",
        "Batch API calls to make parallel requests"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: make parallel requests, After optimization: parallel fetch requests</path>\n## Ensure your app has a lightweight first view\nThe faster the first view appears on the user’s screen, the better the user experience. You can minimize and delay the data loading necessary for your app to display the first view. To do this:\n-   Use [setCustomPostPreview](./custom_post_preview.md) to make a dynamic, compelling preview that loads quickly.\n-   Use [useAsync](./working_with_useasync.md) to load the necessary data without blocking the rendering process.\n-   Import [useState](./working_with_usestate.md) or [useAsync](./working_with_useasync.md) to load the data needed for the specific component only when that component is rendered.\n## How to: make parallel requests\nIn Devvit, the first [render](./rendering_apps.md) happens on the server side. Parallel fetch requests will speed up the first render.\n### Before optimization: individual fetch requests\nIn the render function of this interactive post, the app fetches data about the post, the user, the weather, and the leaderboard stats.\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\nrender: (context) => {\n  const [postInfo] = useState(async () => {\n    return await getThreadInfo(context);\n  });\n\n  const [user] = useState(async () => {\n    return await getUser(context);\n  });\n\n  const [weather] = useState(async () => {\n    return await getTheWeather(context);\n  });\n\n  const [leaderboardStats] = useState(async () => {\n    return await getLeaderboard(context);\n  });\n\n  // the rest of the render function\n};\n```\nIf each request takes roughly 250 ms, then four requests will take around 1 second to resolve. If we change the example to make those requests in parallel, it would take 250 ms to resolve all four!\n### After optimization: parallel fetch requests\nYou can do this in two ways:",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Optimizing performance",
        "How to: make parallel requests",
        "After optimization: parallel fetch requests"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: make parallel requests, After optimization: parallel fetch requests, useState</path>\n-   Use [useAsync](./working_with_useasync.md) to make everything non-blocking.\n-   Use [Promise.all](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) inside one [useState](./working_with_usestate.md) method to get all of the information at once.\n:::note The main difference between these two methods is that `useState` blocks render until it is resolved, and `useAsync` allows the app to render immediately and requires loading states while the requests resolve. :::\n#### useAsync\nThis is the best choice for performance because it allows you to render parts of your application while others may still be loading. Here’s how the same example looks for useAsync:\n```tsx\nimport { Devvit, useAsync } from '@devvit/public-api';\n\nconst { data: postInfo, loading: postInfoLoading } = useAsync(async () => {\n  return await getThreadInfo(context);\n});\n\nconst { data: user, loading: userLoading } = useAsync(async () => {\n  return await getUser(context);\n});\n\nconst { data: weather, loading: weatherLoading } = useAsync(async () => {\n  return await getTheWeather(context);\n});\n\nconst { data: leaderboardStats, loading: leaderboardStatsLoading } = useAsync(async () => {\n  return await getLeaderboard(context);\n});\n```\n#### useState\nThis is the same example using useState.\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\nrender: (context) => {\n  const [appState, setAppState] = useState(async () => {\n    const [postInfo, user, weather, leaderboardStats] = await Promise.all([\n      getThreadInfo(context),\n      getUser(context),\n      getTheWeather(context),\n      getLeaderboard(context),\n    ]);\n    return {\n      postInfo,\n      user,\n      weather,\n      leaderboardStats,\n    };\n  });\n\n  const { postInfo, user, weather, leaderboardStats } = appState;\n\n  // the rest of the render function\n};\n```",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Optimizing performance",
        "How to: make parallel requests",
        "After optimization: parallel fetch requests",
        "useState"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: cache data, Solution: make one request</path>\nYou can see the app gets the same variables from the state object, which means that you won’t need to change the way you access the data from the state in the rest of the app.\n:::note If you need to update one of the state props, you’ll need to do `setAppState({...appState, postInfo: newPostInfo})` instead of `setPostInfo(newPostInfo)`. :::\n## How to: cache data\nThe following example shows how unoptimized code for fetching data from an external resource, like a weather API, looks:\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\n// naive, non-optimal way of fetching that kind of data\nconst [externalData] = useState(async () => {\n  const response = await fetch('https://external.weather.com');\n\n  return await response.json();\n});\n```\n### Problem: request overload\nIn this case, [state](./rendering_apps.md) is initialized for each user that sees the app. This means that in a large subreddit where thousands of users can see the post at the same time, your app would make thousands of requests to the external resource. If you request the data in an interval, like to get a game score or stock market information, then the load repeats on each interval tick. This is not ideal.\n### Solution: make one request\nYou can use a [cache helper](./capabilities/cache.md) to make one request for data, save the response, and provide this response to all users requesting the same data. The cache lives at the subreddit level (not the app level).\n**Example: fetch weather data every 2 hours with cache helper**\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\n// optimized, performant way of fetching that kind of data\nconst [externalData] = useState(async () => {\n  return context.cache(\n    async () => {\n      const response = await fetch('https://external.weather.com');\n      return await response.json();\n    },\n    {\n      key: `weather_data`,\n      ttl: 2 * 60 * 60 * 1000, // 2 hours in milliseconds\n    }\n  );\n});\n```",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Optimizing performance",
        "How to: cache data",
        "Solution: make one request"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: cache data, Solution: schedule a job</path>\n:::note Do not cache sensitive information. Cache helper randomly selects one user to make the real request and saves the response to the cache for others to use. You should only use cache helper for non-personalized fetches, since the same response is available to all users. :::\n### Solution: schedule a job\nAlternatively, you can use [scheduler](./capabilities/scheduler.md) to make the request in background, save the response to [Redis](./capabilities/redis.md), and avoid unnecessary requests to the external resource.\n**Example: fetch weather data every 2 hours with a scheduled job**\n```tsx\nimport { Devvit } from '@devvit/public-api';\n\nDevvit.addSchedulerJob({\n  name: 'fetch_weather_data',\n  onRun: async (_, context) => {\n    const response = await fetch('https://external.weather.com');\n    const responseData = await response.json();\n    await context.redis.set('weather_data', JSON.stringify(responseData));\n  },\n});\n\nDevvit.addTrigger({\n  event: 'AppInstall',\n  onEvent: async (_, context) => {\n    await context.scheduler.runJob({\n      cron: '0 */2 * * *', // runs at the top of every second hour\n      name: 'fetch_weather_data',\n    });\n  },\n});\n\n// inside the render method\nconst [externalData] = useState(async () => {\n  return context.redis.get('fetch_weather_data');\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Optimizing performance",
        "How to: cache data",
        "Solution: schedule a job"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: update the client state without intervals​, With realtime​</path>\n## How to: update the client state without intervals​\nIf you have a game with a leaderboard, scores need to be updated immediately for all active sessions.\nOne way to achieve this is to set an interval to fetch leaderboard stats as often as possible, but making a request in the interval would [switch the execution to server environment](./rendering_apps.md#clientserver-environments) and affect the performance of the app. In addition, each time a user viewed the app, it would spam the leaderboard database in an attempt to get the latest data.\nTo optimize performance, use [realtime](./capabilities/realtime.md) to send the leaderboard stats to all users directly.\n### Without realtime​\nBefore using realtime, the leaderboard fetching code looked like this:\n```tsx\nconst getLeaderboard = async () =>\n  await context.redis.zRange('leaderboard', 0, 5, {\n    reverse: true,\n    by: 'rank',\n  });\n\nconst [leaderboard, setLeaderboard] = useState(async () => {\n  return await getLeaderboard();\n});\n\nconst leaderboardInterval = useInterval(async () => {\n  const newLeaderboard = await getLeaderboard();\n  setLeaderboard(newLeaderboard);\n}, 1000);\n\nleaderboardInterval.start();\n```\nAnd code for updating the leaderboard looked like this:\n```tsx\nawait context.redis.zAdd('leaderboard', { member: username, score: gameScore });\n```\n### With realtime​\nUsing realtime, you can fetch the leaderboard during the initial render and emit the new leaderboard state when the user completes the game.\nThis is the updated game completion code:\n```tsx\n// stays as is\nawait context.redis.zAdd('leaderboard', { member: username, score: gameScore });\n// new code\ncontext.realtime.send('leaderboard_updates', { member: username, score: gameScore });\n```\nNow replace the interval with the realtime subscription:",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Optimizing performance",
        "How to: update the client state without intervals​",
        "With realtime​"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: measure your app’s performance, Add a console log</path>\n```tsx\nconst [leaderboard, setLeaderboard] = useState(async () => {\n  return await getLeaderboard();\n}); // stays as is\n\nconst channel = useChannel({\n  name: 'leaderboard_updates',\n  onMessage: (newLeaderboardEntry) => {\n    const newLeaderboard = [...leaderboard, newLeaderboardEntry] // append new entry\n      .sort((a, b) => b.score - a.score) // sort by score\n      .slice(0, 5); // leave top 5\n    setLeaderboard(newLeaderboard); // update the state\n  },\n});\n\nchannel.subscribe();\n```\nUsing realtime ensures that extra requests will not impact your app’s performance, and the app only emits the event when the data has changed.\n## How to: measure your app’s performance\nYou can use `console.log` to calculate the operation time of your app.\nThis example shows the render function of a basic post that fetches the number of subreddit members.\n```tsx\nconst [subscriberCount] = useState<number>(async () => {\n  const devvitSubredditInfo = await getSubredditInfoByName('devvit');\n  return devvitSubredditInfo.subscribersCount || 0;\n});\n\nreturn (\n  // app markup goes here\n);\n```\n### Add a console log\nBefore the above post can be rendered, two pieces of data need to be requested: subreddit subscribers count and user avatar url. You can measure the amount of time it takes to request data inside the `useState` hook.\nTo do this, you can add:\n-   A variable that stores the timestamp of the operation start.\n-   A console log between the operation end and the return statement that prints the difference between the start and end in milliseconds.\n```tsx\nconst [subscriberCount] = useState<number>(async () => {\n  const startSubscribersRequest = Date.now(); // a reference point for the request start\n  const devvitSubredditInfo = await getSubredditInfoByName('devvit');\n\n  console.log(`subscribers request took: ${Date.now() - startSubscribersRequest} milliseconds`);\n\n  return devvitSubredditInfo.subscribersCount || 0;\n});\n```",
    "metadata": {
      "type": [
        "code",
        "text",
        "heading"
      ],
      "path": [
        "Optimizing performance",
        "How to: measure your app’s performance",
        "Add a console log"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Optimizing performance, How to: measure your app’s performance, Review your data</path>\nAlternatively, you can measure the whole data collection step. On the first line of the render method you can declare a state variable:\n```tsx\nconst [performanceStartRender] = useState(Date.now()); // a reference point for the render start\n```\nAdd a console.log before the return statement:\n```tsx\nconsole.log(`Getting the data took: ${Date.now() - performanceStartRender} milliseconds`);\n```\nAll of that put together will look like this:\n```tsx\nconst [performanceStartRender] = useState(Date.now()); // a reference point for the render start\n\nconst [subscriberCount] = useState<number>(async () => {\n  const startSubscribersRequest = Date.now(); // a reference point for the request start\n  const devvitSubredditInfo = await getSubredditInfoByName('devvit');\n\n  console.log(`subscribers request took: ${Date.now() - startSubscribersRequest} milliseconds`);\n\n  return devvitSubredditInfo.subscribersCount || 0;\n});\n\nconsole.log(`Getting the data took: ${Date.now() - performanceStartRender} milliseconds`);\n\nreturn (\n  // app markup goes here\n);\n```\n### Review your data\nOnce you’ve set up your data collection, you can expect something like that in your logs:\n```\nsubscribers request took: 106 milliseconds\ngetting user avatar url took: 203 milliseconds\ngetting the data took: 310 milliseconds\n```\nThis will help you find the operations that affect your app’s performance.",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading"
      ],
      "path": [
        "Optimizing performance",
        "How to: measure your app’s performance",
        "Review your data"
      ],
      "level": 3
    }
  }
]
[
  {
    "pageContent": "<path>Class: Post, Table of contents</path>\n# Class: Post\n[models](../modules/models.md).Post\n## Table of contents\n### Accessors\n-   [approved](models.Post.md#approved)\n-   [archived](models.Post.md#archived)\n-   [authorId](models.Post.md#authorid)\n-   [authorName](models.Post.md#authorname)\n-   [body](models.Post.md#body)\n-   [bodyHtml](models.Post.md#bodyhtml)\n-   [comments](models.Post.md#comments)\n-   [createdAt](models.Post.md#createdat)\n-   [distinguishedBy](models.Post.md#distinguishedby)\n-   [edited](models.Post.md#edited)\n-   [flair](models.Post.md#flair)\n-   [hidden](models.Post.md#hidden)\n-   [id](models.Post.md#id)\n-   [ignoringReports](models.Post.md#ignoringreports)\n-   [locked](models.Post.md#locked)\n-   [modReportReasons](models.Post.md#modreportreasons)\n-   [nsfw](models.Post.md#nsfw)\n-   [numberOfComments](models.Post.md#numberofcomments)\n-   [numberOfReports](models.Post.md#numberofreports)\n-   [permalink](models.Post.md#permalink)\n-   [quarantined](models.Post.md#quarantined)\n-   [removed](models.Post.md#removed)\n-   [removedBy](models.Post.md#removedby)\n-   [removedByCategory](models.Post.md#removedbycategory)\n-   [score](models.Post.md#score)\n-   [secureMedia](models.Post.md#securemedia)\n-   [spam](models.Post.md#spam)\n-   [spoiler](models.Post.md#spoiler)\n-   [stickied](models.Post.md#stickied)\n-   [subredditId](models.Post.md#subredditid)\n-   [subredditName](models.Post.md#subredditname)\n-   [thumbnail](models.Post.md#thumbnail)\n-   [title](models.Post.md#title)\n-   [url](models.Post.md#url)\n-   [userReportReasons](models.Post.md#userreportreasons)\n### Methods",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Post",
        "Table of contents"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Class: Post, Table of contents, Methods</path>\n-   [addComment](models.Post.md#addcomment)\n-   [addRemovalNote](models.Post.md#addremovalnote)\n-   [approve](models.Post.md#approve)\n-   [crosspost](models.Post.md#crosspost)\n-   [delete](models.Post.md#delete)\n-   [distinguish](models.Post.md#distinguish)\n-   [distinguishAsAdmin](models.Post.md#distinguishasadmin)\n-   [edit](models.Post.md#edit)\n-   [getAuthor](models.Post.md#getauthor)\n-   [hide](models.Post.md#hide)\n-   [ignoreReports](models.Post.md#ignorereports)\n-   [isApproved](models.Post.md#isapproved)\n-   [isArchived](models.Post.md#isarchived)\n-   [isDistinguishedBy](models.Post.md#isdistinguishedby)\n-   [isEdited](models.Post.md#isedited)\n-   [isHidden](models.Post.md#ishidden)\n-   [isIgnoringReports](models.Post.md#isignoringreports)\n-   [isLocked](models.Post.md#islocked)\n-   [isNsfw](models.Post.md#isnsfw)\n-   [isQuarantined](models.Post.md#isquarantined)\n-   [isRemoved](models.Post.md#isremoved)\n-   [isSpam](models.Post.md#isspam)\n-   [isSpoiler](models.Post.md#isspoiler)\n-   [isStickied](models.Post.md#isstickied)\n-   [lock](models.Post.md#lock)\n-   [markAsNsfw](models.Post.md#markasnsfw)\n-   [markAsSpoiler](models.Post.md#markasspoiler)\n-   [remove](models.Post.md#remove)\n-   [sticky](models.Post.md#sticky)\n-   [toJSON](models.Post.md#tojson)\n-   [undistinguish](models.Post.md#undistinguish)\n-   [unhide](models.Post.md#unhide)\n-   [unignoreReports](models.Post.md#unignorereports)\n-   [unlock](models.Post.md#unlock)\n-   [unmarkAsNsfw](models.Post.md#unmarkasnsfw)\n-   [unmarkAsSpoiler](models.Post.md#unmarkasspoiler)\n-   [unsticky](models.Post.md#unsticky)",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 3,
      "path": [
        "Class: Post",
        "Table of contents",
        "Methods"
      ]
    }
  },
  {
    "pageContent": "<path>Class: Post, Accessors, removedBy</path>\n## Accessors\n### approved\n• `get` **approved**(): `boolean`\n#### Returns\n`boolean`\n### archived\n• `get` **archived**(): `boolean`\n#### Returns\n`boolean`\n### authorId\n• `get` **authorId**(): `undefined` | \\`t2\\_${string}\\`\n#### Returns\n`undefined` | \\`t2\\_${string}\\`\n### authorName\n• `get` **authorName**(): `string`\n#### Returns\n`string`\n### body\n• `get` **body**(): `undefined` | `string`\n#### Returns\n`undefined` | `string`\n### bodyHtml\n• `get` **bodyHtml**(): `undefined` | `string`\n#### Returns\n`undefined` | `string`\n### comments\n• `get` **comments**(): [`Listing`](models.Listing.md)<[`Comment`](models.Comment.md)\\>\n#### Returns\n[`Listing`](models.Listing.md)<[`Comment`](models.Comment.md)\\>\n### createdAt\n• `get` **createdAt**(): `Date`\n#### Returns\n`Date`\n### distinguishedBy\n• `get` **distinguishedBy**(): `undefined` | `string`\n#### Returns\n`undefined` | `string`\n### edited\n• `get` **edited**(): `boolean`\n#### Returns\n`boolean`\n### flair\n• `get` **flair**(): `undefined` | [`LinkFlair`](../modules/models.md#linkflair)\n#### Returns\n`undefined` | [`LinkFlair`](../modules/models.md#linkflair)\n### hidden\n• `get` **hidden**(): `boolean`\n#### Returns\n`boolean`\n### id\n• `get` **id**(): \\`t3\\_${string}\\`\n#### Returns\n\\`t3\\_${string}\\`\n### ignoringReports\n• `get` **ignoringReports**(): `boolean`\n#### Returns\n`boolean`\n### locked\n• `get` **locked**(): `boolean`\n#### Returns\n`boolean`\n### modReportReasons\n• `get` **modReportReasons**(): `string`\\[\\]\n#### Returns\n`string`\\[\\]\n### nsfw\n• `get` **nsfw**(): `boolean`\n#### Returns\n`boolean`\n### numberOfComments\n• `get` **numberOfComments**(): `number`\n#### Returns\n`number`\n### numberOfReports\n• `get` **numberOfReports**(): `number`\n#### Returns\n`number`\n### permalink\n• `get` **permalink**(): `string`\n#### Returns\n`string`\n### quarantined\n• `get` **quarantined**(): `boolean`\n#### Returns\n`boolean`\n### removed\n• `get` **removed**(): `boolean`\n#### Returns\n`boolean`\n### removedBy\n• `get` **removedBy**(): `undefined` | `string`",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Class: Post",
        "Accessors",
        "removedBy"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: Post, Accessors, userReportReasons, Returns</path>\nWho removed this object (username)\n#### Returns\n`undefined` | `string`\n### removedByCategory\n• `get` **removedByCategory**(): `undefined` | `string`\nwho/what removed this object. It will return one of the following:\n-   \"anti\\_evil\\_ops\": object is removed by a aeops member\n-   \"author\": object is removed by author of the post\n-   \"automod\\_filtered\": object is filtered by automod\n-   \"community\\_ops\": object is removed by a community team member\n-   \"content\\_takedown\": object is removed due to content violation\n-   \"copyright\\_takedown\": object is removed due to copyright violation\n-   \"deleted\": object is deleted\n-   \"moderator\": object is removed by a mod of the sub\n-   \"reddit\": object is removed by anyone else\n-   undefined: object is not removed\n#### Returns\n`undefined` | `string`\n### score\n• `get` **score**(): `number`\n#### Returns\n`number`\n### secureMedia\n• `get` **secureMedia**(): `undefined` | [`SecureMedia`](../modules/models.md#securemedia)\n#### Returns\n`undefined` | [`SecureMedia`](../modules/models.md#securemedia)\n### spam\n• `get` **spam**(): `boolean`\n#### Returns\n`boolean`\n### spoiler\n• `get` **spoiler**(): `boolean`\n#### Returns\n`boolean`\n### stickied\n• `get` **stickied**(): `boolean`\n#### Returns\n`boolean`\n### subredditId\n• `get` **subredditId**(): \\`t5\\_${string}\\`\n#### Returns\n\\`t5\\_${string}\\`\n### subredditName\n• `get` **subredditName**(): `string`\n#### Returns\n`string`\n### thumbnail\n• `get` **thumbnail**(): `undefined` | { `height`: `number` ; `url`: `string` ; `width`: `number` }\n#### Returns\n`undefined` | { `height`: `number` ; `url`: `string` ; `width`: `number` }\n### title\n• `get` **title**(): `string`\n#### Returns\n`string`\n### url\n• `get` **url**(): `string`\n#### Returns\n`string`\n### userReportReasons\n• `get` **userReportReasons**(): `string`\\[\\]\n#### Returns\n`string`\\[\\]",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Post",
        "Accessors",
        "userReportReasons",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, isEdited, Returns</path>\n## Methods\n### addComment\n▸ **addComment**(`options`): `Promise`<[`Comment`](models.Comment.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | CommentSubmissionOptions |\n#### Returns\n`Promise`<[`Comment`](models.Comment.md)\\>\n### addRemovalNote\n▸ **addRemovalNote**(`options`): `Promise`<`void`\\>\nAdd a mod note for why the post was removed\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | Object | - |\n| options.modNote? | string | the reason for removal (maximum 100 characters) (optional) |\n| options.reasonId | string | id of a Removal Reason - you can leave this as an empty string if you don't have one |\n#### Returns\n`Promise`<`void`\\>\n### approve\n▸ **approve**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### crosspost\n▸ **crosspost**(`options`): `Promise`<[`Post`](models.Post.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | Omit<CrosspostOptions, \"postId\"> |\n#### Returns\n`Promise`<[`Post`](models.Post.md)\\>\n### delete\n▸ **delete**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### distinguish\n▸ **distinguish**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### distinguishAsAdmin\n▸ **distinguishAsAdmin**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### edit\n▸ **edit**(`options`): `Promise`<`void`\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | PostTextOptions |\n#### Returns\n`Promise`<`void`\\>\n### getAuthor\n▸ **getAuthor**(): `Promise`<[`User`](models.User.md)\\>\n#### Returns\n`Promise`<[`User`](models.User.md)\\>\n### hide\n▸ **hide**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### ignoreReports\n▸ **ignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### isApproved\n▸ **isApproved**(): `boolean`\n#### Returns\n`boolean`\n### isArchived\n▸ **isArchived**(): `boolean`\n#### Returns\n`boolean`\n### isDistinguishedBy\n▸ **isDistinguishedBy**(): `undefined` | `string`\n#### Returns\n`undefined` | `string`\n### isEdited\n▸ **isEdited**(): `boolean`\n#### Returns\n`boolean`",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "isEdited",
        "Returns"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, toJSON, Returns</path>\n### isHidden\n▸ **isHidden**(): `boolean`\n#### Returns\n`boolean`\n### isIgnoringReports\n▸ **isIgnoringReports**(): `boolean`\n#### Returns\n`boolean`\n### isLocked\n▸ **isLocked**(): `boolean`\n#### Returns\n`boolean`\n### isNsfw\n▸ **isNsfw**(): `boolean`\n#### Returns\n`boolean`\n### isQuarantined\n▸ **isQuarantined**(): `boolean`\n#### Returns\n`boolean`\n### isRemoved\n▸ **isRemoved**(): `boolean`\n#### Returns\n`boolean`\n### isSpam\n▸ **isSpam**(): `boolean`\n#### Returns\n`boolean`\n### isSpoiler\n▸ **isSpoiler**(): `boolean`\n#### Returns\n`boolean`\n### isStickied\n▸ **isStickied**(): `boolean`\n#### Returns\n`boolean`\n### lock\n▸ **lock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### markAsNsfw\n▸ **markAsNsfw**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### markAsSpoiler\n▸ **markAsSpoiler**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### remove\n▸ **remove**(`isSpam?`): `Promise`<`void`\\>\n#### Parameters\n| Name | Type | Default value |\n|---|---|---|\n| isSpam | boolean | false |\n#### Returns\n`Promise`<`void`\\>\n### sticky\n▸ **sticky**(`position?`): `Promise`<`void`\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| position? | 2 | 1 | 3 | 4 |\n#### Returns\n`Promise`<`void`\\>\n### toJSON\n▸ **toJSON**(): `Pick`<[`Post`](models.Post.md), `\"spoiler\"` | `\"subredditName\"` | `\"flair\"` | `\"id\"` | `\"score\"` | `\"title\"` | `\"url\"` | `\"subredditId\"` | `\"body\"` | `\"archived\"` | `\"nsfw\"` | `\"quarantined\"` | `\"spam\"` | `\"permalink\"` | `\"authorId\"` | `\"authorName\"` | `\"bodyHtml\"` | `\"thumbnail\"` | `\"numberOfComments\"` | `\"numberOfReports\"` | `\"createdAt\"` | `\"approved\"` | `\"stickied\"` | `\"removed\"` | `\"removedBy\"` | `\"removedByCategory\"` | `\"edited\"` | `\"locked\"` | `\"hidden\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"secureMedia\"` | `\"userReportReasons\"` | `\"modReportReasons\"`\\>\n#### Returns",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "toJSON",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: Post, Methods, unsticky, Returns</path>\n`Pick`<[`Post`](models.Post.md), `\"spoiler\"` | `\"subredditName\"` | `\"flair\"` | `\"id\"` | `\"score\"` | `\"title\"` | `\"url\"` | `\"subredditId\"` | `\"body\"` | `\"archived\"` | `\"nsfw\"` | `\"quarantined\"` | `\"spam\"` | `\"permalink\"` | `\"authorId\"` | `\"authorName\"` | `\"bodyHtml\"` | `\"thumbnail\"` | `\"numberOfComments\"` | `\"numberOfReports\"` | `\"createdAt\"` | `\"approved\"` | `\"stickied\"` | `\"removed\"` | `\"removedBy\"` | `\"removedByCategory\"` | `\"edited\"` | `\"locked\"` | `\"hidden\"` | `\"ignoringReports\"` | `\"distinguishedBy\"` | `\"secureMedia\"` | `\"userReportReasons\"` | `\"modReportReasons\"`\\>\n### undistinguish\n▸ **undistinguish**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unhide\n▸ **unhide**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unignoreReports\n▸ **unignoreReports**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unlock\n▸ **unlock**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unmarkAsNsfw\n▸ **unmarkAsNsfw**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unmarkAsSpoiler\n▸ **unmarkAsSpoiler**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>\n### unsticky\n▸ **unsticky**(): `Promise`<`void`\\>\n#### Returns\n`Promise`<`void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Class: Post",
        "Methods",
        "unsticky",
        "Returns"
      ],
      "level": 3
    }
  }
]
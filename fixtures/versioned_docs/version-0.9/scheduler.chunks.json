[
  {
    "pageContent": "<path>Scheduler, Schedule an action</path>\n# Scheduler\nThe scheduler can store and execute future actions to your app, like sending a private message at a specified time, tracking upvotes, or scheduling time-outs for user actions. You can:\n-   Schedule an action\n-   Schedule a recurring action\n-   Cancel an action\n## Prerequisites\nTo use the scheduler, add the following plugins to the `main.ts` file of your app.\nAdd the [Reddit API client](https://www.reddit.com/dev/api):\n```bash\nconst reddit = new RedditAPIClient();\n```\nAdd the scheduler plugin:\n```bash\nconst scheduler = Devvit.use(Devvit.Types.Scheduler);\n```\n## Limitations\nLimits are per installation of an app.\nAn installation can have up to 10 live cron actions.\nThere are two rate limits enforced by the Schedule() method when actions are created:\n-   Creation rate: up to 60 calls to Schedule() per minute\n-   Delivery rate: up to 60 deliveries per minute\n## Schedule an action\nYou can schedule an action to run once at a specific time, like sending a private message in the [Remind Me](https://developers.reddit.com/docs/remind_me_guide) tutorial.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Scheduler",
        "Schedule an action"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Scheduler, Cancel an action</path>\n```typescript\nconst REMIND_ME_ACTION_ID = 'remindme';\n\nDevvit.addSchedulerHandler({\n  type: REMIND_ME_ACTION_ID,\n  async handler(event, metadata) {\n    const { userId, postId, fromWhen } = event.data!;\n\n    const user = await reddit.getUserById(userId, metadata);\n    const post = await reddit.getPostById(postId, metadata);\n\n    /**\n     * Send a private message to the user:\n     */\n    await reddit.sendPrivateMessage(\n      {\n        to: user.username,\n        subject: 'RemindMe',\n        text: `Beep boop! You asked me to remind you about [${post.title}](${post.permalink}) at ${fromWhen}!`,\n      },\n      metadata\n    );\n  },\n});\n\n// within a capability (e.g. a menu action handler or trigger handler)\nawait scheduler.Schedule(\n  {\n    action: {\n      type: REMIND_ME_ACTION_ID,\n      data: {\n        userId: currentUser.id,\n        postId: `t3_${event.post.id}`,\n        fromWhen: now,\n      },\n    },\n    when: parsedTime,\n    cron: undefined,\n  },\n  metadata\n);\n```\n## Cancel an action\nUse the action ID to cancel a scheduled action and remove it from your app. This sample code creates a menu action that allows you to cancel all scheduled actions for an installation.",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Scheduler",
        "Cancel an action"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Scheduler, Cancel an action</path>\n```typescript\nDevvit.addAction({\n  name: 'clear',\n  description: 'clear all scheduled actions in this installation',\n  context: Context.POST,\n  userContext: UserContext.MODERATOR,\n  async handler(_: PostContextActionEvent, metadata?: Metadata) {\n    try {\n      console.log('clearing schedule');\n      let n = 0;\n      let jobs = await scheduler.List(\n        {\n          after: new Date(0),\n          before: new Date(Date.now() + 10 * 365 * 86400 * 1000),\n        },\n        metadata\n      );\n      for (const job of await jobs.actions) {\n        try {\n          console.log('cancelling job:', job.id);\n          await scheduler.Cancel({ id: job.id });\n          console.log('cancelled');\n          n += 1;\n        } catch (e) {\n          console.log('exc:', e);\n        }\n      }\n      console.log('done cancelling jobs');\n      return { success: true, message: `cancelled ${n} jobs`, effects: [] };\n    } catch (e) {\n      console.log('exception:', e);\n      throw e;\n    }\n  },\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 2,
      "path": [
        "Scheduler",
        "Cancel an action"
      ]
    }
  }
]
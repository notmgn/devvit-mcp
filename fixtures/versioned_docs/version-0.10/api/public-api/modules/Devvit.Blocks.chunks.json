[
  {
    "pageContent": "<path>Namespace: Blocks, Table of contents</path>\n# Namespace: Blocks\n[Devvit](Devvit.md).Blocks\n## Table of contents\n### Interfaces\n-   [IntrinsicElements](../interfaces/Devvit.Blocks.IntrinsicElements.md)\n### Type Aliases",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Namespace: Blocks",
        "Table of contents"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Table of contents, Type Aliases</path>\n-   [Actionable](Devvit.Blocks.md#actionable)\n-   [Alignment](Devvit.Blocks.md#alignment)\n-   [AnimationDirection](Devvit.Blocks.md#animationdirection)\n-   [AnimationLoop](Devvit.Blocks.md#animationloop)\n-   [AnimationProps](Devvit.Blocks.md#animationprops)\n-   [AnimationType](Devvit.Blocks.md#animationtype)\n-   [AvatarBackground](Devvit.Blocks.md#avatarbackground)\n-   [AvatarFacing](Devvit.Blocks.md#avatarfacing)\n-   [AvatarProps](Devvit.Blocks.md#avatarprops)\n-   [AvatarSize](Devvit.Blocks.md#avatarsize)\n-   [BaseProps](Devvit.Blocks.md#baseprops)\n-   [ButtonAppearance](Devvit.Blocks.md#buttonappearance)\n-   [ButtonProps](Devvit.Blocks.md#buttonprops)\n-   [ButtonSize](Devvit.Blocks.md#buttonsize)\n-   [ColorString](Devvit.Blocks.md#colorstring)\n-   [ContainerBorderWidth](Devvit.Blocks.md#containerborderwidth)\n-   [ContainerCornerRadius](Devvit.Blocks.md#containercornerradius)\n-   [ContainerGap](Devvit.Blocks.md#containergap)\n-   [ContainerPadding](Devvit.Blocks.md#containerpadding)\n-   [FullSnooProps](Devvit.Blocks.md#fullsnooprops)\n-   [FullSnooSize](Devvit.Blocks.md#fullsnoosize)\n-   [HasElementChildren](Devvit.Blocks.md#haselementchildren)\n-   [HasStringChildren](Devvit.Blocks.md#hasstringchildren)\n-   [HorizontalAlignment](Devvit.Blocks.md#horizontalalignment)\n-   [IconProps](Devvit.Blocks.md#iconprops)\n-   [IconSize](Devvit.Blocks.md#iconsize)\n-   [ImageProps](Devvit.Blocks.md#imageprops)\n-   [ImageResizeMode](Devvit.Blocks.md#imageresizemode)\n-   [IntrinsicAttributes](Devvit.Blocks.md#intrinsicattributes)\n-   [IntrinsicElementsType](Devvit.Blocks.md#intrinsicelementstype)\n-   [OnPressEvent](Devvit.Blocks.md#onpressevent)\n-   [OnPressEventHandler](Devvit.Blocks.md#onpresseventhandler)\n-   [RootHeight](Devvit.Blocks.md#rootheight)\n-   [RootProps](Devvit.Blocks.md#rootprops)\n-   [SizePercent](Devvit.Blocks.md#sizepercent)\n-   [SizePixels](Devvit.Blocks.md#sizepixels)\n-   [SizeString](Devvit.Blocks.md#sizestring)\n-   [SpacerProps](Devvit.Blocks.md#spacerprops)",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 3,
      "path": [
        "Namespace: Blocks",
        "Table of contents",
        "Type Aliases"
      ]
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases</path>\n-   [SpacerShape](Devvit.Blocks.md#spacershape)\n-   [SpacerSize](Devvit.Blocks.md#spacersize)\n-   [StackProps](Devvit.Blocks.md#stackprops)\n-   [TextOutline](Devvit.Blocks.md#textoutline)\n-   [TextOverflow](Devvit.Blocks.md#textoverflow)\n-   [TextProps](Devvit.Blocks.md#textprops)\n-   [TextSize](Devvit.Blocks.md#textsize)\n-   [TextStyle](Devvit.Blocks.md#textstyle)\n-   [TextWeight](Devvit.Blocks.md#textweight)\n-   [Thickness](Devvit.Blocks.md#thickness)\n-   [VerticalAlignment](Devvit.Blocks.md#verticalalignment)\n-   [WebViewProps](Devvit.Blocks.md#webviewprops)\n## Type Aliases\n### Actionable\nƬ **Actionable**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| onPress? | OnPressEventHandler |\n### Alignment\nƬ **Alignment**: \\`${VerticalAlignment}\\` | \\`${HorizontalAlignment}\\` | \\`${VerticalAlignment} ${HorizontalAlignment}\\` | \\`${HorizontalAlignment} ${VerticalAlignment}\\`\n### AnimationDirection\nƬ **AnimationDirection**: `\"forward\"` | `\"backward\"`\n### AnimationLoop\nƬ **AnimationLoop**: `\"repeat\"` | `\"bounce\"`\n### AnimationProps\nƬ **AnimationProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`Actionable`](Devvit.Blocks.md#actionable) & { `autoplay?`: `boolean` ; `direction?`: [`AnimationDirection`](Devvit.Blocks.md#animationdirection) ; `imageHeight`: [`SizePixels`](Devvit.Blocks.md#sizepixels) | `number` ; `imageWidth`: [`SizePixels`](Devvit.Blocks.md#sizepixels) | `number` ; `loop?`: `boolean` ; `loopMode?`: [`AnimationLoop`](Devvit.Blocks.md#animationloop) ; `speed?`: `number` ; `type?`: [`AnimationType`](Devvit.Blocks.md#animationtype) ; `url`: `string` }\n### AnimationType\nƬ **AnimationType**: `\"lottie\"`\n### AvatarBackground\nƬ **AvatarBackground**: `\"light\"` | `\"dark\"`\n### AvatarFacing\nƬ **AvatarFacing**: `\"left\"` | `\"right\"`\n### AvatarProps",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases, ContainerPadding</path>\nƬ **AvatarProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`Actionable`](Devvit.Blocks.md#actionable) & { `background?`: [`AvatarBackground`](Devvit.Blocks.md#avatarbackground) ; `facing?`: [`AvatarFacing`](Devvit.Blocks.md#avatarfacing) ; `size?`: [`AvatarSize`](Devvit.Blocks.md#avatarsize) ; `thingId`: `string` }\n### AvatarSize\nƬ **AvatarSize**: `\"xxsmall\"` | `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"` | `\"xlarge\"` | `\"xxlarge\"` | `\"xxxlarge\"`\n### BaseProps\nƬ **BaseProps**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| grow? | boolean |\n| height? | SizeString |\n| maxHeight? | SizeString |\n| maxWidth? | SizeString |\n| minHeight? | SizeString |\n| minWidth? | SizeString |\n| width? | SizeString |\n### ButtonAppearance\nƬ **ButtonAppearance**: `\"secondary\"` | `\"primary\"` | `\"plain\"` | `\"bordered\"` | `\"media\"` | `\"destructive\"` | `\"caution\"` | `\"success\"`\n### ButtonProps\nƬ **ButtonProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`HasStringChildren`](Devvit.Blocks.md#hasstringchildren) & [`Actionable`](Devvit.Blocks.md#actionable) & { `appearance?`: [`ButtonAppearance`](Devvit.Blocks.md#buttonappearance) ; `darkTextColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `disabled?`: `boolean` ; `icon?`: [`IconName`](../README.md#iconname) ; `lightTextColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `onClick?`: `string` ; `size?`: [`ButtonSize`](Devvit.Blocks.md#buttonsize) ; `textColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) }\n### ButtonSize\nƬ **ButtonSize**: `\"small\"` | `\"medium\"` | `\"large\"`\n### ColorString\nƬ **ColorString**: `string`\n### ContainerBorderWidth\nƬ **ContainerBorderWidth**: [`Thickness`](Devvit.Blocks.md#thickness)\n### ContainerCornerRadius\nƬ **ContainerCornerRadius**: `\"none\"` | `\"small\"` | `\"medium\"` | `\"large\"` | `\"full\"`\n### ContainerGap\nƬ **ContainerGap**: `\"none\"` | `\"small\"` | `\"medium\"` | `\"large\"`\n### ContainerPadding\nƬ **ContainerPadding**: `\"none\"` | `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"`",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases",
        "ContainerPadding"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases</path>\n### FullSnooProps\nƬ **FullSnooProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`Actionable`](Devvit.Blocks.md#actionable) & { `facing?`: [`AvatarFacing`](Devvit.Blocks.md#avatarfacing) ; `size?`: [`FullSnooSize`](Devvit.Blocks.md#fullsnoosize) ; `userId`: `string` }\n### FullSnooSize\nƬ **FullSnooSize**: `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"` | `\"xlarge\"` | `\"xxlarge\"`\n### HasElementChildren\nƬ **HasElementChildren**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| children? | ElementChildren |\n### HasStringChildren\nƬ **HasStringChildren**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| children? | StringChildren |\n### HorizontalAlignment\nƬ **HorizontalAlignment**: `\"start\"` | `\"center\"` | `\"end\"`\n### IconProps\nƬ **IconProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`HasStringChildren`](Devvit.Blocks.md#hasstringchildren) & [`Actionable`](Devvit.Blocks.md#actionable) & { `color?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `darkColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `lightColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `name`: [`IconName`](../README.md#iconname) ; `size?`: [`IconSize`](Devvit.Blocks.md#iconsize) }\n### IconSize\nƬ **IconSize**: `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"`\n### ImageProps\nƬ **ImageProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`Actionable`](Devvit.Blocks.md#actionable) & { `description?`: `string` ; `imageHeight`: [`SizePixels`](Devvit.Blocks.md#sizepixels) | `number` ; `imageWidth`: [`SizePixels`](Devvit.Blocks.md#sizepixels) | `number` ; `resizeMode?`: [`ImageResizeMode`](Devvit.Blocks.md#imageresizemode) ; `url`: `string` }\n### ImageResizeMode\nƬ **ImageResizeMode**: `\"none\"` | `\"fit\"` | `\"fill\"` | `\"cover\"` | `\"scale-down\"`\n### IntrinsicAttributes\nƬ **IntrinsicAttributes**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| onclick | string |\n### IntrinsicElementsType",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases</path>\nƬ **IntrinsicElementsType**: keyof [`IntrinsicElements`](../interfaces/Devvit.Blocks.IntrinsicElements.md)\n### OnPressEvent\nƬ **OnPressEvent**: `Object`\n#### Type declaration\n| Name | Type |\n|---|---|\n| state? | Data |\n### OnPressEventHandler\nƬ **OnPressEventHandler**: (`event`: [`OnPressEvent`](Devvit.Blocks.md#onpressevent)) => `void` | `Promise`<`void`\\>\n#### Type declaration\n▸ (`event`): `void` | `Promise`<`void`\\>\n##### Parameters\n| Name | Type |\n|---|---|\n| event | OnPressEvent |\n##### Returns\n`void` | `Promise`<`void`\\>\n### RootHeight\nƬ **RootHeight**: `\"regular\"` | `\"tall\"`\n### RootProps\nƬ **RootProps**: [`HasElementChildren`](Devvit.Blocks.md#haselementchildren) & { `height?`: [`RootHeight`](Devvit.Blocks.md#rootheight) }\n### SizePercent\nƬ **SizePercent**: \\`${number}%\\`\n### SizePixels\nƬ **SizePixels**: \\`${number}px\\`\n### SizeString\nƬ **SizeString**: [`SizePixels`](Devvit.Blocks.md#sizepixels) | [`SizePercent`](Devvit.Blocks.md#sizepercent) | `number`\n### SpacerProps\nƬ **SpacerProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & { `shape?`: [`SpacerShape`](Devvit.Blocks.md#spacershape) ; `size?`: [`SpacerSize`](Devvit.Blocks.md#spacersize) }\n### SpacerShape\nƬ **SpacerShape**: `\"invisible\"` | `\"thin\"` | `\"square\"`\n### SpacerSize\nƬ **SpacerSize**: `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"`\n### StackProps",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases</path>\nƬ **StackProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`HasElementChildren`](Devvit.Blocks.md#haselementchildren) & [`Actionable`](Devvit.Blocks.md#actionable) & { `alignment?`: [`Alignment`](Devvit.Blocks.md#alignment) ; `backgroundColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `border?`: [`ContainerBorderWidth`](Devvit.Blocks.md#containerborderwidth) ; `borderColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `cornerRadius?`: [`ContainerCornerRadius`](Devvit.Blocks.md#containercornerradius) ; `darkBackgroundColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `darkBorderColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `gap?`: [`ContainerGap`](Devvit.Blocks.md#containergap) ; `lightBackgroundColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `lightBorderColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `padding?`: [`ContainerPadding`](Devvit.Blocks.md#containerpadding) ; `reverse?`: `boolean` }\n### TextOutline\nƬ **TextOutline**: [`Thickness`](Devvit.Blocks.md#thickness)\n### TextOverflow\nƬ **TextOverflow**: `\"clip\"` | `\"ellipsis\"`\n### TextProps\nƬ **TextProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & [`HasStringChildren`](Devvit.Blocks.md#hasstringchildren) & [`Actionable`](Devvit.Blocks.md#actionable) & { `alignment?`: [`Alignment`](Devvit.Blocks.md#alignment) ; `color?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `darkColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `lightColor?`: [`ColorString`](Devvit.Blocks.md#colorstring) ; `onClick?`: `string` ; `outline?`: [`TextOutline`](Devvit.Blocks.md#textoutline) ; `overflow?`: [`TextOverflow`](Devvit.Blocks.md#textoverflow) ; `selectable?`: `boolean` ; `size?`: [`TextSize`](Devvit.Blocks.md#textsize) ; `style?`: [`TextStyle`](Devvit.Blocks.md#textstyle) ; `weight?`: [`TextWeight`](Devvit.Blocks.md#textweight) ; `wrap?`: `boolean` }\n### TextSize\nƬ **TextSize**: `\"xsmall\"` | `\"small\"` | `\"medium\"` | `\"large\"` | `\"xlarge\"` | `\"xxlarge\"`\n### TextStyle",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Namespace: Blocks, Type Aliases, WebViewProps</path>\nƬ **TextStyle**: `\"body\"` | `\"metadata\"` | `\"heading\"`\n### TextWeight\nƬ **TextWeight**: `\"regular\"` | `\"bold\"`\n### Thickness\nƬ **Thickness**: `\"none\"` | `\"thin\"` | `\"thick\"`\n### VerticalAlignment\nƬ **VerticalAlignment**: `\"top\"` | `\"middle\"` | `\"bottom\"`\n### WebViewProps\nƬ **WebViewProps**: [`BaseProps`](Devvit.Blocks.md#baseprops) & { `url`: `string` }",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Namespace: Blocks",
        "Type Aliases",
        "WebViewProps"
      ],
      "level": 3
    }
  }
]
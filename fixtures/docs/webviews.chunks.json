[
  {
    "pageContent": "<path>Web views, Migration guide</path>\n# Web views\nWeb views allow you to include HTML, CSS, and JavaScript and have it run within your Reddit app. This gives you full control over your app's appearance and behavior while running within Reddit's platform.\n## Migration guide\nThis migration guide helps you migrate from using the web view component with visibility toggle, as used in our web-view-post template, to using the new useWebView hook. This will give you access to more gestures and sounds, and make sure your apps are performant in Reddit feeds.\n**Overview**\nThe `useWebView` hook simplifies web view management with three main parameters:\n-   url: The URL of your web view content\n-   onMessage: Handler for messages from the web view\n-   onUnmount: Cleanup function that runs when the web view is closed\nInstead of managing visibility with state, you'll use the mount function returned by the hook to open the web view.\n**Before (web view component)**\n```ts\n// Managing visibility with state\nconst [webViewVisible, setWebViewVisible] = useState(false);\n\n// Message handler\nconst onMessage = async (msg) => {\n  if (msg.type === 'setCounter') {\n    await context.redis.set(`counter_${context.postId}`, msg.data.newCounter.toString());\n    setCounter(msg.data.newCounter);\n  }\n};\n\nreturn (\n  <vstack>\n    <button onPress={() => setWebViewVisible(true)}>Launch App</button>\n    {webViewVisible ? <webview id=\"myWebView\" url=\"page.html\" onMessage={onMessage} /> : null}\n  </vstack>\n);\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Web views",
        "Migration guide"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Web views, Migration guide</path>\n**After (useWebView hook)**\n```ts\nimport { useWebView } from '@devvit/public-api';\n\n// Using useWebView hook\nconst { mount } = useWebView({\n  // URL of your web view content\n  url: 'page.html',\n\n  // Message handler\n  onMessage: async (message, webView) => {\n    if (message.type === 'setCounter') {\n      await context.redis.set(`counter_${context.postId}`, message.data.newCounter.toString());\n      setCounter(message.data.newCounter);\n    }\n  },\n\n  // Cleanup when web view is closed\n  onUnmount: () => {\n    context.ui.showToast('Web view closed!');\n  },\n});\n\nreturn (\n  <vstack>\n    <button onPress={mount}>Launch App</button>\n  </vstack>\n);\n```\n**Key Differences**\n-   Opening the web view\nOld: Web view component was open immediately The old web-view-post template toggled visibility with state (setWebViewVisible(true))\nNew: Use mount function from the hook\n-   Message Handling\nOld: Separate onMessage function passed as a parameter to component New: Defined directly in useWebView parameters, along with access to an onUnmount function",
    "metadata": {
      "type": [
        "text",
        "code"
      ],
      "level": 2,
      "path": [
        "Web views",
        "Migration guide"
      ]
    }
  },
  {
    "pageContent": "<path>Web views, useWebView, Syntax</path>\n-   Cleanup\nOld: N/A New: onUnmount parameter handles callback after cleanup\nSupported platforms:\n-   iOS (v2025.05)\n-   Android (v2025.05)\n-   Web\n## Getting started\nCreate a new web view project:\n```bash\ndevvit new --template web-view-post\ncd my-project\n```\nYour project structure will look like this.\n```\nmy-project/\n├── webroot/          # All web content goes here\n│   ├── page.html     # Main HTML file\n│   ├── styles.css    # Stylesheets\n│   └── app.js        # JavaScript code\n└── src/\n    └── main.tsx      # Devvit app code\n```\n## useWebView\nThe `useWebViewHook` integrates web views into your Devvit app. This opens a large viewport (full screen on mobile and a modal on web) and provides a clean interface for managing the web view lifecycle and communication.\n### Syntax\n```typescript\n/** Message from Devvit to the web view. */\nexport type DevvitMessage =\n  | { type: 'initialData'; data: { username: string; currentCounter: number } }\n  | { type: 'updateCounter'; data: { currentCounter: number } };\n\n/** Message from the web view to Devvit. */\nexport type WebViewMessage =\n  | { type: 'webViewReady' }\n  | { type: 'setCounter'; data: { newCounter: number } };\n\nconst { mount, unmount, postMessage } = useWebView<WebViewMessage, DevvitMessage>({\n  url: 'page.html',\n  onMessage: (message, webView) => {},\n  onUnmount: () => {},\n});\n```\n-   url: the path to your HTML file relative to the webroot directory (defaults to ‘index.html’ if unspecified)\n-   onMessage: callback function that handles messages received from the web view; it receives two parameters:\n    -   message: the data sent from the web view via postMessage\n    -   webView: an object containing methods to interact with the web view\n-   onUnmount (optional): callback function that runs when the web view is closed. This does not fire on navigation or closing the browser tab.\nReturn values:",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Web views",
        "useWebView",
        "Syntax"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Web views, Best practices, Data Synchronization</path>\n-   mount: function to programmatically open the web view\n-   unmount: function to programmatically close the web view\n-   postMessage: function to send a message to the web view\n### Basic example\n```typescript\nconst App = () => {\n  const { mount } = useWebView({\n    // URL of your web view content\n    url: 'page.html',\n\n    // Handle messages from web view\n    onMessage: (message) => {\n      console.log('Received from web view:', message);\n    },\n\n    // Cleanup when web view closes\n    onUnmount: () => {\n      console.log('Web view closed');\n    },\n  });\n\n  return <button onPress={mount}>Launch App</button>;\n};\n```\nBe sure to call `mount` after some user interaction, like a button press, so that it's clear to the user what initiated the fullscreen presentation.\n:::note Web views that are presented in fullscreen without user interaction will not be approved. :::\n## Best practices\n### UI/UX patterns\n-   Handle responsive views across mobile and desktop devices\n-   Call mount only after user interaction (e.g. onPress)\n### File organization\n-   Keep all web files in the webroot/ directory\n-   Use separate files for HTML, CSS, and JavaScript\n-   Consider using a bundler for larger applications\n### Data Synchronization\n-   Cache data in localStorage where appropriate\n-   Wait to send messages to the web view until the web view is fully loaded",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Web views",
        "Best practices",
        "Data Synchronization"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Web views, Communication between Devvit and web view, From Devvit to web view</path>\n## Known limitations\n### CSS/JS requirements\n-   ❌ No inline CSS or JavaScript\n-   ✅ Use separate .css and .js files\n### Forms\n-   ❌ No direct form submissions\n-   ✅ Use JavaScript to handle form data\n-   ✅ Send data via postMessage\n## Communication between Devvit and web view\nWeb views let you build custom UIs with HTML/CSS/JS while accessing Devvit's backend services ([Redis](./capabilities/redis.md), [fetch](./capabilities/http-fetch.md), [scheduler](./capabilities/scheduler.md), [triggers](./capabilities/triggers.md)) via message passing between the two contexts.\n![Sample web views post](./assets/webviews-devvit-architecture.png)\n### From web view to Devvit\nIn your web view JavaScript:\n```javascript\n// app.js\nwindow.parent.postMessage(\n  {\n    type: 'userAction',\n    data: { clicked: true },\n  },\n  '*'\n);\n```\nIn your Devvit app:\n```typescript\n// main.tsx\nconst { mount } = useWebView({\n  url: 'page.html',\n  onMessage: (message, webView) => {\n    if (message.type === 'userAction') {\n      console.log('User clicked:', message.data.clicked);\n    } else if (message.type === 'unmount') {\n      webView.unmount();\n    }\n  },\n});\n```\n### From Devvit to web view\nIn your Devvit app:\n```typescript\n// main.tsx\nconst { mount } = useWebView({\n  url: 'page.html',\n  onMessage: (message, webView) => {\n    if (message.type === 'userAction') {\n      console.log('User clicked:', message.data.clicked);\n      webView.postMessage({\n        type: 'userActionHandled',\n        data: { userActionComplete: true },\n      });\n    }\n  },\n});\n```\nIn your web view JavaScript:\n```javascript\n// app.js\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'devvit-message') {\n    const { message } = event.data;\n    console.log('Received from Devvit:', message);\n  }\n});\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Web views",
        "Communication between Devvit and web view",
        "From Devvit to web view"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Web views, Managing state, Server state</path>\n## Managing state\n### Handling initial state\nUse `postMessage` to inject the initial state from the Devvit app into the web view after it is mounted. To ensure the web view is loaded before sending messages to it, send a message to the Devvit app requesting the initial state.\n#### From web view to Devvit\nIn your web view JavaScript:\n```javascript\n// app.js\n// Inform the Devvit app that the web view is ready to receive messages\naddEventListener('load', (event) => {\n  window.parent.postMessage({ type: 'webViewReady' }, '*');\n});\n```\nIn your Devvit app:\n```typescript\n// main.tsx\nconst { mount } = useWebView({\n  url: 'page.html',\n  onMessage: (message, webView) => {\n    if (message.type === 'webViewReady') {\n      webView.postMessage({ data: { score: 44 } });\n    }\n  },\n});\n```\n### Local state\nPersist local state using `localStorage`, which is fast, secure, and available on all platforms.\nWeb views can use `localStorage` for client-side persistence:\n```javascript\n// Save data\nlocalStorage.setItem('gameState', JSON.stringify(state));\n\n// Load data\nconst savedState = localStorage.getItem('gameState');\n```\n### Server state\nTo allow for state to sync across devices, data should be persisted using Redis within the Devvit app. It's recommended to frequently store state using `localStorage`, which is faster and use Redis less frequently.\n```typescript\nconst App = () => {\n  // Load data from Redis\n  const [counter] = useState(async () => {\n    const value = await context.redis.get(`counter_${context.postId}`);\n    return Number(value ?? 0);\n  });\n\n  const { mount } = useWebView({\n    url: 'page.html',\n    onMessage: async (message) => {\n      if (message.type === 'updateCounter') {\n        // Update Redis\n        await context.redis.set(`counter_${context.postId}`, message.data.newValue);\n      }\n    },\n  });\n\n  return <button onPress={mount}>Open App</button>;\n};\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Web views",
        "Managing state",
        "Server state"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Web views, Adding payments, Communicating between web view and payments</path>\n## Adding payments\nAdding [payments](payments/payments_add.md) to your app is pretty straightforward, but there are a couple of things to you need to know when also using web views.\nFor a full working example, see `devvit new --template=payments-web-view`.\n### Using events to handle payments\nYour user will interact with a web view, but payments APIs can only be invoked in blocks. To make this work, you need to:\n-   Use events (from web view to Devvit) to communicate that the user wants to purchase a product.\n-   Use events (from Devvit to the web view) to communicate whether purchase succeeds and what the user purchased.\n### Communicating between web view and payments\nBoth your web view and payments integrations need to be declared in the same `addCustomPostType` block. At that point, the lambdas given to each integration will be able to reference each other:\n```typescript\nconst payments = usePayments((result: OnPurchaseResult) => {\n  // Tell the web view that a purchase was made.\n  // A full example might validate that the purchase was successful & communicate what was purchased.\n  webView.postMessage({\n    type: 'purchaseMade',\n    data: {},\n  });\n});\nconst webView = useWebView<WebViewMessage, DevvitMessage>({\n  url: 'page.html',\n  async onMessage(message) {\n    // Trigger a payment, based on user interaction in the web view.\n    // A full example might check that the user is eligible to make the purchased indicated -\n    // for instance validating they aren't trying to purchase something they've already purchased\n    // or are otherwise ineligible to purchase.\n    if (message.type === 'purchase') {\n      payments.purchase(message.data.sku);\n    }\n  },\n});\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Web views",
        "Adding payments",
        "Communicating between web view and payments"
      ],
      "level": 2
    }
  }
]
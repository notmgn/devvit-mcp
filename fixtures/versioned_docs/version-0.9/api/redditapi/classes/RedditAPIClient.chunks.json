[
  {
    "pageContent": "<path>Class: RedditAPIClient, Table of contents, Methods</path>\n# Class: RedditAPIClient\nThe Reddit API Client\nMake sure you initialize this with `new RedditAPIClient()` at the top of your `main.ts` file before using it.\n**`Example`**\n```ts\nconst reddit = new RedditAPIClient();\n\nconst memes = await reddit.getSubredditByName('memes', metadata);\nconst posts = await memes.getHotPosts(metadata).all();\nconst hottestPost = posts[0];\nconst comments = await hottestPost.comments().all();\n```\n## Table of contents\n### Methods",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Table of contents",
        "Methods"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Table of contents, Methods</path>\n-   [addEditorToWikiPage](RedditAPIClient.md#addeditortowikipage)\n-   [addModNote](RedditAPIClient.md#addmodnote)\n-   [addWidget](RedditAPIClient.md#addwidget)\n-   [addWikiContributor](RedditAPIClient.md#addwikicontributor)\n-   [approve](RedditAPIClient.md#approve)\n-   [approveUser](RedditAPIClient.md#approveuser)\n-   [banUser](RedditAPIClient.md#banuser)\n-   [banWikiContributor](RedditAPIClient.md#banwikicontributor)\n-   [createPostFlairTemplate](RedditAPIClient.md#createpostflairtemplate)\n-   [createUserFlairTemplate](RedditAPIClient.md#createuserflairtemplate)\n-   [createWikiPage](RedditAPIClient.md#createwikipage)\n-   [crosspost](RedditAPIClient.md#crosspost)\n-   [deleteFlairTemplate](RedditAPIClient.md#deleteflairtemplate)\n-   [deleteModNote](RedditAPIClient.md#deletemodnote)\n-   [deleteWidget](RedditAPIClient.md#deletewidget)\n-   [editFlairTemplate](RedditAPIClient.md#editflairtemplate)\n-   [getAppUser](RedditAPIClient.md#getappuser)\n-   [getApprovedUsers](RedditAPIClient.md#getapprovedusers)\n-   [getBannedUsers](RedditAPIClient.md#getbannedusers)\n-   [getBannedWikiContributors](RedditAPIClient.md#getbannedwikicontributors)\n-   [getCommentById](RedditAPIClient.md#getcommentbyid)\n-   [getComments](RedditAPIClient.md#getcomments)\n-   [getCommentsByUser](RedditAPIClient.md#getcommentsbyuser)\n-   [getControversialPosts](RedditAPIClient.md#getcontroversialposts)\n-   [getCurrentSubreddit](RedditAPIClient.md#getcurrentsubreddit)\n-   [getCurrentUser](RedditAPIClient.md#getcurrentuser)\n-   [getHotPosts](RedditAPIClient.md#gethotposts)\n-   [getModNotes](RedditAPIClient.md#getmodnotes)\n-   [getModerationLog](RedditAPIClient.md#getmoderationlog)\n-   [getModerators](RedditAPIClient.md#getmoderators)\n-   [getMutedUsers](RedditAPIClient.md#getmutedusers)\n-   [getNewPosts](RedditAPIClient.md#getnewposts)\n-   [getPostById](RedditAPIClient.md#getpostbyid)\n-   [getPostFlairTemplates](RedditAPIClient.md#getpostflairtemplates)",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 3,
      "path": [
        "Class: RedditAPIClient",
        "Table of contents",
        "Methods"
      ]
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Table of contents, Methods</path>\n-   [getPostsByUser](RedditAPIClient.md#getpostsbyuser)\n-   [getRisingPosts](RedditAPIClient.md#getrisingposts)\n-   [getSubredditById](RedditAPIClient.md#getsubredditbyid)\n-   [getSubredditByName](RedditAPIClient.md#getsubredditbyname)\n-   [getTopPosts](RedditAPIClient.md#gettopposts)\n-   [getUserById](RedditAPIClient.md#getuserbyid)\n-   [getUserByUsername](RedditAPIClient.md#getuserbyusername)\n-   [getUserFlairTemplates](RedditAPIClient.md#getuserflairtemplates)\n-   [getWidgets](RedditAPIClient.md#getwidgets)\n-   [getWikiContributors](RedditAPIClient.md#getwikicontributors)\n-   [getWikiPage](RedditAPIClient.md#getwikipage)\n-   [getWikiPageRevisions](RedditAPIClient.md#getwikipagerevisions)\n-   [getWikiPageSettings](RedditAPIClient.md#getwikipagesettings)\n-   [getWikiPages](RedditAPIClient.md#getwikipages)\n-   [inviteModerator](RedditAPIClient.md#invitemoderator)\n-   [muteUser](RedditAPIClient.md#muteuser)\n-   [remove](RedditAPIClient.md#remove)\n-   [removeEditorFromWikiPage](RedditAPIClient.md#removeeditorfromwikipage)\n-   [removeModerator](RedditAPIClient.md#removemoderator)\n-   [removePostFlair](RedditAPIClient.md#removepostflair)\n-   [removeUser](RedditAPIClient.md#removeuser)\n-   [removeUserFlair](RedditAPIClient.md#removeuserflair)\n-   [removeWikiContributor](RedditAPIClient.md#removewikicontributor)\n-   [reorderWidgets](RedditAPIClient.md#reorderwidgets)\n-   [revertWikiPage](RedditAPIClient.md#revertwikipage)\n-   [revokeModeratorInvite](RedditAPIClient.md#revokemoderatorinvite)\n-   [sendPrivateMessage](RedditAPIClient.md#sendprivatemessage)\n-   [sendPrivateMessageAsSubreddit](RedditAPIClient.md#sendprivatemessageassubreddit)\n-   [setModeratorPermissions](RedditAPIClient.md#setmoderatorpermissions)\n-   [setPostFlair](RedditAPIClient.md#setpostflair)\n-   [setUserFlair](RedditAPIClient.md#setuserflair)\n-   [submitComment](RedditAPIClient.md#submitcomment)\n-   [submitPost](RedditAPIClient.md#submitpost)\n-   [unbanUser](RedditAPIClient.md#unbanuser)",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 3,
      "path": [
        "Class: RedditAPIClient",
        "Table of contents",
        "Methods"
      ]
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, addWidget, Parameters</path>\n-   [unbanWikiContributor](RedditAPIClient.md#unbanwikicontributor)\n-   [unmuteUser](RedditAPIClient.md#unmuteuser)\n-   [updateWikiPage](RedditAPIClient.md#updatewikipage)\n-   [updateWikiPageSettings](RedditAPIClient.md#updatewikipagesettings)\n## Methods\n### addEditorToWikiPage\n▸ **addEditorToWikiPage**(`subredditName`, `page`, `username`, `metadata`): `Promise`< `void`\\>\nAdd an editor to a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit the wiki is in. |\n| page | string | The name of the wiki page to add the editor to. |\n| username | string | The username of the user to add as an editor. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### addModNote\n▸ **addModNote**(`options`, `metadata`): `Promise`< [`ModNote`](ModNote.md)\\>\nAdd a mod note.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | Omit< Prettify< PostNotesRequest & { label: UserNoteLabel ; redditId: `t1_${string}` | `t3_${string}` }>, \"redditId\"> & { redditId: string } | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`ModNote`](ModNote.md)\\>\nA Promise that resolves if the mod note was successfully added.\n### addWidget\n▸ **addWidget**(`widgetData`, `metadata`): `Promise`< [`ImageWidget`](ImageWidget.md) | [`CalendarWidget`](CalendarWidget.md) | [`TextAreaWidget`](TextAreaWidget.md) | [`ButtonWidget`](ButtonWidget.md) | [`CommunityListWidget`](CommunityListWidget.md) | [`PostFlairWidget`](PostFlairWidget.md) | [`CustomWidget`](CustomWidget.md)\\>\nAdd a widget to a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "addWidget",
        "Parameters"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, approveUser, Parameters</path>\n| Name | Type | Description |\n|---|---|---|\n| widgetData | AddWidgetData | The data for the widget to add. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`ImageWidget`](ImageWidget.md) | [`CalendarWidget`](CalendarWidget.md) | [`TextAreaWidget`](TextAreaWidget.md) | [`ButtonWidget`](ButtonWidget.md) | [`CommunityListWidget`](CommunityListWidget.md) | [`PostFlairWidget`](PostFlairWidget.md) | [`CustomWidget`](CustomWidget.md)\\>\n-   The added Widget object.\n### addWikiContributor\n▸ **addWikiContributor**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nAdd a user as a wiki contributor for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to add as a wiki contributor. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to add the user as a wiki contributor. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### approve\n▸ **approve**(`id`, `metadata`): `Promise`< `void`\\>\nApprove a post or comment.\n**`Example`**\n```ts\nawait reddit.approve('t3_123456', metadata);\nawait reddit.approve('t1_123456', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| id | string | The id of the post (t3*) or comment (t1*) to approve. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### approveUser\n▸ **approveUser**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nApprove a user to post in a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "approveUser",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, createUserFlairTemplate, Parameters</path>\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to approve. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to approve the user in. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### banUser\n▸ **banUser**(`options`, `metadata`): `Promise`< `void`\\>\nBan a user from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | BanUserOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### banWikiContributor\n▸ **banWikiContributor**(`options`, `metadata`): `Promise`< `void`\\>\nBan a user from contributing to the wiki on a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | BanWikiContributorOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### createPostFlairTemplate\n▸ **createPostFlairTemplate**(`options`, `metadata`): `Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nCreate a post flair template for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | CreateFlairTemplateOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nThe created FlairTemplate object.\n### createUserFlairTemplate\n▸ **createUserFlairTemplate**(`options`, `metadata`): `Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nCreate a user flair template for a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "createUserFlairTemplate",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, deleteModNote, Parameters</path>\n| Name | Type | Description |\n|---|---|---|\n| options | CreateFlairTemplateOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nThe created FlairTemplate object.\n### createWikiPage\n▸ **createWikiPage**(`options`, `metadata`): `Promise`< [`WikiPage`](WikiPage.md)\\>\nCreate a new wiki page for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | CreateWikiPageOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`WikiPage`](WikiPage.md)\\>\n-   The created WikiPage object.\n### crosspost\n▸ **crosspost**(`options`, `metadata`): `Promise`< [`Post`](Post.md)\\>\nCrossposts a post to a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | CrosspostOptions | Options for crossposting a post |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Post`](Post.md)\\>\n-   A Promise that resolves to a Post object.\n### deleteFlairTemplate\n▸ **deleteFlairTemplate**(`subredditName`, `flairTemplateId`, `metadata`): `Promise`< `void`\\>\nDelete a flair template from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to delete the flair template from. |\n| flairTemplateId | string | The ID of the flair template to delete. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### deleteModNote\n▸ **deleteModNote**(`options`, `metadata`): `Promise`< `boolean`\\>\nDelete a mod note.\n#### Parameters",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "deleteModNote",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getApprovedUsers</path>\n| Name | Type | Description |\n|---|---|---|\n| options | DeleteNotesRequest | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `boolean`\\>\n### deleteWidget\n▸ **deleteWidget**(`subredditName`, `widgetId`, `metadata`): `Promise`< `void`\\>\nDelete a widget from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to delete the widget from. |\n| widgetId | string | The ID of the widget to delete. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### editFlairTemplate\n▸ **editFlairTemplate**(`options`, `metadata`): `Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nEdit a flair template for a subreddit. This can be either a post or user flair template. Note: If you leave any of the options fields as undefined, they will reset to their default values.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | EditFlairTemplateOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`FlairTemplate`](FlairTemplate.md)\\>\nThe edited FlairTemplate object.\n### getAppUser\n▸ **getAppUser**(`metadata`): `Promise`< [`User`](User.md)\\>\nGet the user that the app runs as on the provided metadata.\n**`Example`**\n```ts\nconst user = await reddit.getAppUser(metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`User`](User.md)\\>\nA Promise that resolves to a User object.\n### getApprovedUsers\n▸ **getApprovedUsers**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getApprovedUsers"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\nGet a list of users who have been approved to post in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA Listing of User objects.\n### getBannedUsers\n▸ **getBannedUsers**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>\nGet a list of users who are banned from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA Listing of User objects.\n### getBannedWikiContributors\n▸ **getBannedWikiContributors**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>\nGet a list of users who are banned from contributing to the wiki on a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA Listing of User objects.\n### getCommentById\n▸ **getCommentById**(`id`, `metadata`): `Promise`< [`Comment`](Comment.md)\\>\nGet a [Comment](Comment.md) object by ID\n**`Example`**\n```ts\nconst comment = await reddit.getCommentById('t1_1qjpg', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| id | string | The ID (starting with t1_) of the comment to retrieve. e.g. t1_1qjpg |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Comment`](Comment.md)\\>\nA Promise that resolves to a Comment object.\n### getComments",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getCurrentSubreddit</path>\n▸ **getComments**(`options`, `metadata`): [`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nGet a list of comments from a specific post or comment.\n**`Example`**\n```ts\nconst comments = await reddit\n  .getComments(\n    {\n      postId: 't3_1qjpg',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetCommentsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nA Listing of Comment objects.\n### getCommentsByUser\n▸ **getCommentsByUser**(`options`, `metadata`): [`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nGet a list of comments by a specific user.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetCommentsByUserOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nA Listing of Comment objects.\n### getControversialPosts\n▸ **getControversialPosts**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of controversial posts from a specific subreddit.\n**`Example`**\n```ts\nconst posts = await reddit\n  .getControversialPosts(\n    {\n      subredditName: 'memes',\n      timeframe: 'day',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPostsOptionsWithTimeframe | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getCurrentSubreddit\n▸ **getCurrentSubreddit**(`metadata`): `Promise`< [`Subreddit`](Subreddit.md)\\>",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getCurrentSubreddit"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getModNotes, Parameters</path>\nRetrieves the current subreddit based on the provided metadata.\n**`Example`**\n```ts\nconst currentSubreddit = await reddit.getCurrentSubreddit(metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Subreddit`](Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n### getCurrentUser\n▸ **getCurrentUser**(`metadata`): `Promise`< [`User`](User.md)\\>\nGet the current calling user based on the provided metadata.\n**`Example`**\n```ts\nconst user = await reddit.getCurrentUser(metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`User`](User.md)\\>\nA Promise that resolves to a User object.\n### getHotPosts\n▸ **getHotPosts**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of hot posts from a specific subreddit.\n**`Example`**\n```ts\nconst posts = await reddit\n  .getHotPosts(\n    {\n      subredditName: 'memes',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetHotPostsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getModNotes\n▸ **getModNotes**(`options`, `metadata`): [`Listing`](Listing.md)< [`ModNote`](ModNote.md)\\>\nGet a list of mod notes related to a user in a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getModNotes",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getMutedUsers</path>\n| Name | Type | Description |\n|---|---|---|\n| options | Prettify< Pick< GetNotesRequest, \"subreddit\" | \"user\"> & { filter?: ModNoteType } & Pick< ListingFetchOptions, \"before\" | \"limit\">> | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`ModNote`](ModNote.md)\\>\nA listing of ModNote objects.\n### getModerationLog\n▸ **getModerationLog**(`options`, `metadata`): [`Listing`](Listing.md)< [`ModAction`](../interfaces/ModAction.md)\\>\nGet the moderation log for a subreddit.\n**`Example`**\n```ts\nconst modActions = await reddit\n  .getModerationLog(\n    {\n      subredditName: 'memes',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetModerationLogOptions | Options for the request |\n| metadata | undefined | Metadata | Additional metadata to attach to the request |\n#### Returns\n[`Listing`](Listing.md)< [`ModAction`](../interfaces/ModAction.md)\\>\nA Listing of ModAction objects.\n### getModerators\n▸ **getModerators**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>\nGet a list of users who are moderators for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA Listing of User objects.\n### getMutedUsers\n▸ **getMutedUsers**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>\nGet a list of users who are muted in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getMutedUsers"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getPostsByUser</path>\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA listing of User objects.\n### getNewPosts\n▸ **getNewPosts**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of new posts from a specific subreddit.\n**`Example`**\n```ts\nconst posts = await reddit\n  .getNewPosts(\n    {\n      subredditName: 'memes',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPostsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getPostById\n▸ **getPostById**(`id`, `metadata`): `Promise`< [`Post`](Post.md)\\>\nGets a [Post](Post.md) object by ID\n#### Parameters\n| Name | Type |\n|---|---|\n| id | string |\n| metadata | undefined | Metadata |\n#### Returns\n`Promise`< [`Post`](Post.md)\\>\nA Promise that resolves to a Post object.\n### getPostFlairTemplates\n▸ **getPostFlairTemplates**(`subredditName`, `metadata`): `Promise`< [`FlairTemplate`](FlairTemplate.md)\\[\\]>\nGet the list of post flair templates for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to get the post flair templates for. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`FlairTemplate`](FlairTemplate.md)\\[\\]>\nA Promise that resolves with an array of FlairTemplate objects.\n### getPostsByUser\n▸ **getPostsByUser**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of posts from a specific user.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPostsByUserOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getPostsByUser"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods</path>\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getRisingPosts\n▸ **getRisingPosts**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of hot posts from a specific subreddit.\n**`Example`**\n```ts\nconst posts = await reddit\n  .getRisingPosts(\n    {\n      subredditName: 'memes',\n      timeframe: 'day',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPostsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getSubredditById\n▸ **getSubredditById**(`id`, `metadata`): `Promise`< [`Subreddit`](Subreddit.md)\\>\nGets a [Subreddit](Subreddit.md) object by ID\n**`Example`**\n```ts\nconst memes = await reddit.getSubredditById('t5_2qjpg', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| id | string | The ID (starting with t5_) of the subreddit to retrieve. e.g. t5_2qjpg |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Subreddit`](Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n### getSubredditByName\n▸ **getSubredditByName**(`name`, `metadata`): `Promise`< [`Subreddit`](Subreddit.md)\\>\nGets a [Subreddit](Subreddit.md) object by name\n**`Example`**\n```ts\nconst askReddit = await reddit.getSubredditByName('askReddit', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| name | string | The name of a subreddit omitting the r/. This is case insensitive. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Subreddit`](Subreddit.md)\\>\nA Promise that resolves a Subreddit object.\n### getTopPosts",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getUserFlairTemplates</path>\n▸ **getTopPosts**(`options`, `metadata`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet a list of controversial posts from a specific subreddit.\n**`Example`**\n```ts\nconst posts = await reddit\n  .getControversialPosts(\n    {\n      subredditName: 'memes',\n      timeframe: 'day',\n      limit: 1000,\n      pageSize: 100,\n    },\n    metadata\n  )\n  .all();\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPostsOptionsWithTimeframe | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### getUserById\n▸ **getUserById**(`id`, `metadata`): `Promise`< [`User`](User.md)\\>\nGets a [User](User.md) object by ID\n**`Example`**\n```ts\nconst user = await reddit.getUserById('t2_1qjpg', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| id | string | The ID (starting with t2_) of the user to retrieve. e.g. t2_1qjpg |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`User`](User.md)\\>\nA Promise that resolves to a User object.\n### getUserByUsername\n▸ **getUserByUsername**(`username`, `metadata`): `Promise`< [`User`](User.md)\\>\nGets a [User](User.md) object by username\n**`Example`**\n```ts\nconst user = await reddit.getUserByUsername('devvit', metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user omitting the u/. e.g. 'devvit' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`User`](User.md)\\>\nA Promise that resolves to a User object.\n### getUserFlairTemplates\n▸ **getUserFlairTemplates**(`subredditName`, `metadata`): `Promise`< [`FlairTemplate`](FlairTemplate.md)\\[\\]>\nGet the list of user flair templates for a subreddit.",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getUserFlairTemplates"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getWikiPage</path>\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to get the user flair templates for. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`FlairTemplate`](FlairTemplate.md)\\[\\]>\nA Promise that resolves with an array of FlairTemplate objects.\n### getWidgets\n▸ **getWidgets**(`subredditName`, `metadata`): `Promise`< ([`ImageWidget`](ImageWidget.md) | [`CalendarWidget`](CalendarWidget.md) | [`TextAreaWidget`](TextAreaWidget.md) | [`ButtonWidget`](ButtonWidget.md) | [`CommunityListWidget`](CommunityListWidget.md) | [`PostFlairWidget`](PostFlairWidget.md) | [`CustomWidget`](CustomWidget.md))\\[\\]>\nGet the widgets for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to get the widgets for. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< ([`ImageWidget`](ImageWidget.md) | [`CalendarWidget`](CalendarWidget.md) | [`TextAreaWidget`](TextAreaWidget.md) | [`ButtonWidget`](ButtonWidget.md) | [`CommunityListWidget`](CommunityListWidget.md) | [`PostFlairWidget`](PostFlairWidget.md) | [`CustomWidget`](CustomWidget.md))\\[\\]>\n-   An array of Widget objects.\n### getWikiContributors\n▸ **getWikiContributors**(`options`, `metadata`): [`Listing`](Listing.md)< [`User`](User.md)\\>\nGet a list of users who are wiki contributors of a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetSubredditUsersOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\nA Listing of User objects.\n### getWikiPage\n▸ **getWikiPage**(`subredditName`, `page`, `metadata`): `Promise`< [`WikiPage`](WikiPage.md)\\>",
    "metadata": {
      "type": [
        "heading",
        "table",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getWikiPage"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, getWikiPages, Returns</path>\nGet a wiki page from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to get the wiki page from. |\n| page | string | The name of the wiki page to get. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`WikiPage`](WikiPage.md)\\>\nThe requested WikiPage object.\n### getWikiPageRevisions\n▸ **getWikiPageRevisions**(`options`, `metadata`): [`Listing`](Listing.md)< [`WikiPageRevision`](WikiPageRevision.md)\\>\nGet the revisions for a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | GetPageRevisionsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n[`Listing`](Listing.md)< [`WikiPageRevision`](WikiPageRevision.md)\\>\nA Listing of WikiPageRevision objects.\n### getWikiPageSettings\n▸ **getWikiPageSettings**(`subredditName`, `page`, `metadata`): `Promise`< [`WikiPageSettings`](WikiPageSettings.md)\\>\nGet the settings for a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit the wiki is in. |\n| page | string | The name of the wiki page to get the settings for. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`WikiPageSettings`](WikiPageSettings.md)\\>\nA WikiPageSettings object.\n### getWikiPages\n▸ **getWikiPages**(`subredditName`, `metadata`): `Promise`< `string`\\[\\]>\nGet the wiki pages for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to get the wiki pages from. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `string`\\[\\]>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "getWikiPages",
        "Returns"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, removeEditorFromWikiPage</path>\nA list of the wiki page names for the subreddit.\n### inviteModerator\n▸ **inviteModerator**(`options`, `metadata`): `Promise`< `void`\\>\nInvite a user to become a moderator of a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | InviteModeratorOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### muteUser\n▸ **muteUser**(`options`, `metadata`): `Promise`< `void`\\>\nMute a user in a subreddit. Muting a user prevents them from sending modmail.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | MuteUserOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### remove\n▸ **remove**(`id`, `isSpam`, `metadata`): `Promise`< `void`\\>\nRemove a post or comment.\n**`Example`**\n```ts\nawait reddit.remove('t3_123456', false, metadata);\nawait reddit.remove('t1_123456', true, metadata);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| id | string | The id of the post (t3*) or comment (t1*) to remove. |\n| isSpam | boolean | Whether or not the post/comment is spam. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### removeEditorFromWikiPage\n▸ **removeEditorFromWikiPage**(`subredditName`, `page`, `username`, `metadata`): `Promise`< `void`\\>\nRemove an editor from a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit the wiki is in. |\n| page | string | The name of the wiki page to remove the editor from. |\n| username | string | The username of the user to remove as an editor. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table",
        "code"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "removeEditorFromWikiPage"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, removeUserFlair, Parameters</path>\n`Promise`< `void`\\>\n### removeModerator\n▸ **removeModerator**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nRemove a user as a moderator of a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to remove as a moderator. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to remove the user as a moderator from. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### removePostFlair\n▸ **removePostFlair**(`subredditName`, `postId`, `metadata`): `Promise`< `void`\\>\nRemove the flair for a post in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to remove the flair from. |\n| postId | string | The ID of the post to remove the flair from. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### removeUser\n▸ **removeUser**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nRemove a user's approval to post in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to remove approval from. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to remove the user's approval from. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### removeUserFlair\n▸ **removeUserFlair**(`subredditName`, `username`, `metadata`): `Promise`< `void`\\>\nRemove the flair for a user in a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "removeUserFlair",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, revertWikiPage</path>\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to remove the flair from. |\n| username | string | The username of the user to remove the flair from. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### removeWikiContributor\n▸ **removeWikiContributor**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nRemove a user's wiki contributor status for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to remove wiki contributor status from. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to remove the user's wiki contributor status from. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### reorderWidgets\n▸ **reorderWidgets**(`subredditName`, `orderByIds`, `metadata`): `Promise`< `void`\\>\nReorder the widgets for a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit to reorder the widgets for. |\n| orderByIds | string[] | An array of widget IDs in the order that they should be displayed. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### revertWikiPage\n▸ **revertWikiPage**(`subredditName`, `page`, `revisionId`, `metadata`): `Promise`< `void`\\>\nRevert a wiki page to a previous revision.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | The name of the subreddit the wiki is in. |\n| page | string | The name of the wiki page to revert. |\n| revisionId | string | The ID of the revision to revert to. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "revertWikiPage"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, setModeratorPermissions, Parameters</path>\n`Promise`< `void`\\>\n### revokeModeratorInvite\n▸ **revokeModeratorInvite**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nRevoke a moderator invite for a user to a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to revoke the invite for. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to revoke the invite for. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### sendPrivateMessage\n▸ **sendPrivateMessage**(`options`, `metadata`): `Promise`< `void`\\>\nSends a private message to a user.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | SendPrivateMessageOptions | The options for sending the message. |\n| metadata | undefined | Metadata | Metadata from the orignating handler. |\n#### Returns\n`Promise`< `void`\\>\nA Promise that resolves if the private message was successfully sent.\n### sendPrivateMessageAsSubreddit\n▸ **sendPrivateMessageAsSubreddit**(`options`, `metadata`): `Promise`< `void`\\>\nSends a private message to a user on behalf of a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | SendPrivateMessageAsSubredditOptions | The options for sending the message as a subreddit. |\n| metadata | undefined | Metadata | Metadata from the orignating handler. |\n#### Returns\n`Promise`< `void`\\>\nA Promise that resolves if the private message was successfully sent.\n### setModeratorPermissions\n▸ **setModeratorPermissions**(`username`, `subredditName`, `permissions`, `metadata`): `Promise`< `void`\\>\nUpdate the permissions of a moderator of a subreddit.\n#### Parameters",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "setModeratorPermissions",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, submitPost</path>\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to update the permissions for. e.g. 'spez' |\n| subredditName | string | The name of the subreddit. e.g. 'memes' |\n| permissions | ModeratorPermission[] | The permissions to give the user. e.g ['posts', 'wiki'] |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### setPostFlair\n▸ **setPostFlair**(`options`, `metadata`): `Promise`< `void`\\>\nSet the flair for a post in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | SetPostFlairOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### setUserFlair\n▸ **setUserFlair**(`options`, `metadata`): `Promise`< `void`\\>\nSet the flair for a user in a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | SetUserFlairOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### submitComment\n▸ **submitComment**(`options`, `metadata`): `Promise`< [`Comment`](Comment.md)\\>\nSubmit a new comment to a post or comment.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | Object | You must provide either options.text or options.richtext but not both. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Comment`](Comment.md)\\>\nA Promise that resolves to a Comment object.\n### submitPost\n▸ **submitPost**(`options`, `metadata`): `Promise`< [`Post`](Post.md)\\>\nSubmits a new post to a subreddit.\n**`Example`**",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "submitPost"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, unmuteUser, Parameters</path>\n```ts\nconst post = await reddit.submitPost(\n  {\n    subredditName: 'devvit',\n    title: 'Hello World',\n    richtext: new RichTextBuilder()\n      .heading({ level: 1 }, (h) => {\n        h.rawText('Hello world');\n      })\n      .codeBlock({}, (cb) => cb.rawText('This post was created via the Devvit API'))\n      .build(),\n  },\n  metadata\n);\n```\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | SubmitPostOptions | Either a self post or a link post. |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`Post`](Post.md)\\>\nA Promise that resolves to a Post object.\n### unbanUser\n▸ **unbanUser**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nUnban a user from a subreddit.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to unban. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to unban the user from. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### unbanWikiContributor\n▸ **unbanWikiContributor**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to unban. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to unban the user from contributing to the wiki on. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### unmuteUser\n▸ **unmuteUser**(`username`, `subredditName`, `metadata`): `Promise`< `void`\\>\nUnmute a user in a subreddit. Unmuting a user allows them to send modmail.\n#### Parameters",
    "metadata": {
      "type": [
        "code",
        "heading",
        "table",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "unmuteUser",
        "Parameters"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Class: RedditAPIClient, Methods, updateWikiPageSettings, Returns</path>\n| Name | Type | Description |\n|---|---|---|\n| username | string | The username of the user to unmute. e.g. 'spez' |\n| subredditName | string | The name of the subreddit to unmute the user in. e.g. 'memes' |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< `void`\\>\n### updateWikiPage\n▸ **updateWikiPage**(`options`, `metadata`): `Promise`< [`WikiPage`](WikiPage.md)\\>\nUpdate a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | UpdateWikiPageOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`WikiPage`](WikiPage.md)\\>\nThe updated WikiPage object.\n### updateWikiPageSettings\n▸ **updateWikiPageSettings**(`options`, `metadata`): `Promise`< [`WikiPageSettings`](WikiPageSettings.md)\\>\nUpdate the settings for a wiki page.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | UpdatePageSettingsOptions | Options for the request |\n| metadata | undefined | Metadata | Metadata from the originating handler. Make sure to always include this. |\n#### Returns\n`Promise`< [`WikiPageSettings`](WikiPageSettings.md)\\>\nA WikiPageSettings object.",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text"
      ],
      "path": [
        "Class: RedditAPIClient",
        "Methods",
        "updateWikiPageSettings",
        "Returns"
      ],
      "level": 3
    }
  }
]
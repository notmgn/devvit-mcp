[
  {
    "pageContent": "<path></path>\nimport PercentDimensionExamples from './\\_percent\\_dimension\\_examples.mdx';\nexport const widthStretch = 'horizontally in a vstack'; export const heightStretch = 'vertically in a hstack'; export const widthGrow = 'horizontally in a hstack'; export const heightGrow = 'vertically in a vstack';\nA block's {props.dimension} will be omitted if the relative {props.dimension} is invalid and the parent is a {(props.dimension == \"width\") && (\"hstack\")}{(props.dimension != \"width\") && (\"vstack\")}. If the parent is a `zstack`, then an invalid {props.dimension} will always be omitted.\nA relative {props.dimension} is valid if it meets one of the following rules:\n-   Parent block must have a defined {props.dimension} or infer its {props.dimension} from an ancestor.\n-   Parent block must stretch {(props.dimension == \"width\") && (widthStretch)}{(props.dimension != \"width\") && (heightStretch)} (see [alignment](../blocks/stacks#alignment)).\n-   Parent block must [grow](../blocks/stacks#grow) {(props.dimension == \"width\") && (widthGrow)}{(props.dimension != \"width\") && (heightGrow)}.\n:::note Relative {props.dimension} can only grow or stretch in a constrained dimension. The nearest ancestor without a definition will break the chain, and the block's {props.dimension} will be omitted. :::",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 0,
      "path": []
    }
  }
]
[
  {
    "pageContent": "<path>Class: User, Accessors, username, Returns</path>\n# Class: User\nA class representing a user.\n## Table of contents\n### Accessors\n-   [commentKarma](User.md#commentkarma)\n-   [createdAt](User.md#createdat)\n-   [id](User.md#id)\n-   [linkKarma](User.md#linkkarma)\n-   [modPermissions](User.md#modpermissions)\n-   [nsfw](User.md#nsfw)\n-   [username](User.md#username)\n### Methods\n-   [getComments](User.md#getcomments)\n-   [getModPermissionsForSubreddit](User.md#getmodpermissionsforsubreddit)\n-   [getPosts](User.md#getposts)\n-   [toJSON](User.md#tojson)\n-   [createRelationship](User.md#createrelationship)\n-   [getById](User.md#getbyid)\n-   [getByUsername](User.md#getbyusername)\n-   [getFromMetadata](User.md#getfrommetadata)\n-   [getSubredditUsersByType](User.md#getsubredditusersbytype)\n-   [removeRelationship](User.md#removerelationship)\n-   [setModeratorPermissions](User.md#setmoderatorpermissions)\n## Accessors\n### commentKarma\n• `get` **commentKarma**(): `number`\nThe amount of comment karma the user has.\n#### Returns\n`number`\n### createdAt\n• `get` **createdAt**(): `Date`\nThe date the user was created.\n#### Returns\n`Date`\n### id\n• `get` **id**(): \\`t2\\_${string}\\`\nThe ID (starting with t2\\_) of the user to retrieve.\n**`Example`**\n```ts\n't2_1w72';\n```\n#### Returns\n\\`t2\\_${string}\\`\n### linkKarma\n• `get` **linkKarma**(): `number`\nThe amount of link karma the user has.\n#### Returns\n`number`\n### modPermissions\n• `get` **modPermissions**(): `Map`< `string`, [`ModeratorPermission`](../README.md#moderatorpermission)\\[\\]>\nThe permissions the user has on the subreddit.\n#### Returns\n`Map`< `string`, [`ModeratorPermission`](../README.md#moderatorpermission)\\[\\]>\n### nsfw\n• `get` **nsfw**(): `boolean`\nWhether the user's profile is marked as NSFW (Not Safe For Work).\n#### Returns\n`boolean`\n### username\n• `get` **username**(): `string`\nThe username of the user omitting the u/.\n**`Example`**\n```ts\n'spez';\n```\n#### Returns\n`string`",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Class: User",
        "Accessors",
        "username",
        "Returns"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Class: User, Methods</path>\n## Methods\n### getComments\n▸ **getComments**(`options`): [`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nGet the user's comments.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | Omit< GetCommentsByUserOptions, \"username\"> | Options for the request |\n#### Returns\n[`Listing`](Listing.md)< [`Comment`](Comment.md)\\>\nA Listing of Comment objects.\n### getModPermissionsForSubreddit\n▸ **getModPermissionsForSubreddit**(`subredditName`): `undefined` | [`ModeratorPermission`](../README.md#moderatorpermission)\\[\\]\nGet the mod permissions the user has on the subreddit if they are a moderator.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| subredditName | string | name of the subreddit |\n#### Returns\n`undefined` | [`ModeratorPermission`](../README.md#moderatorpermission)\\[\\]\nthe moderator permissions the user has on the subreddit\n### getPosts\n▸ **getPosts**(`options`): [`Listing`](Listing.md)< [`Post`](Post.md)\\>\nGet the user's posts.\n#### Parameters\n| Name | Type | Description |\n|---|---|---|\n| options | Omit< GetPostsByUserOptions, \"username\"> | Options for the request |\n#### Returns\n[`Listing`](Listing.md)< [`Post`](Post.md)\\>\nA Listing of Post objects.\n### toJSON\n▸ **toJSON**(): `Object`\n#### Returns\n`Object`\n| Name | Type |\n|---|---|\n| commentKarma | number |\n| createdAt | Date |\n| id | `t2_${string}` |\n| linkKarma | number |\n| modPermissionsBySubreddit | { [k: string]: T; } |\n| nsfw | boolean |\n| username | string |\n### createRelationship\n▸ `Static` **createRelationship**(`options`, `metadata?`): `Promise`< `void`\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | CreateRelationshipOptions |\n| metadata? | Metadata |\n#### Returns\n`Promise`< `void`\\>\n### getById\n▸ `Static` **getById**(`id`, `metadata?`): `Promise`< [`User`](User.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| id | `t2_${string}` |\n| metadata? | Metadata |\n#### Returns\n`Promise`< [`User`](User.md)\\>\n### getByUsername",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Class: User",
        "Methods"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Class: User, Methods, setModeratorPermissions, Returns</path>\n▸ `Static` **getByUsername**(`username`, `metadata?`): `Promise`< [`User`](User.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| username | string |\n| metadata? | Metadata |\n#### Returns\n`Promise`< [`User`](User.md)\\>\n### getFromMetadata\n▸ `Static` **getFromMetadata**(`key`, `metadata?`): `Promise`< [`User`](User.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| key | string |\n| metadata? | Metadata |\n#### Returns\n`Promise`< [`User`](User.md)\\>\n### getSubredditUsersByType\n▸ `Static` **getSubredditUsersByType**(`options`, `metadata?`): [`Listing`](Listing.md)< [`User`](User.md)\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | GetSubredditUsersByTypeOptions |\n| metadata? | Metadata |\n#### Returns\n[`Listing`](Listing.md)< [`User`](User.md)\\>\n### removeRelationship\n▸ `Static` **removeRelationship**(`options`, `metadata?`): `Promise`< `void`\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| options | RemoveRelationshipOptions |\n| metadata? | Metadata |\n#### Returns\n`Promise`< `void`\\>\n### setModeratorPermissions\n▸ `Static` **setModeratorPermissions**(`username`, `subredditName`, `permissions`, `metadata?`): `Promise`< `void`\\>\n#### Parameters\n| Name | Type |\n|---|---|\n| username | string |\n| subredditName | string |\n| permissions | ModeratorPermission[] |\n| metadata? | Metadata |\n#### Returns\n`Promise`< `void`\\>",
    "metadata": {
      "type": [
        "text",
        "heading",
        "table"
      ],
      "path": [
        "Class: User",
        "Methods",
        "setModeratorPermissions",
        "Returns"
      ],
      "level": 3
    }
  }
]
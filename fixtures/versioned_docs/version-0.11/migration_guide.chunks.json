[
  {
    "pageContent": "<path>Migration guide, Menu items, Dynamic forms</path>\n# Migration guide\nWith version 0.10.0 of Devvit, we are dramatically changing the syntax of our capabilities to make development even easier. Three keys changes you’ll see:\n-   Moving capabilities into a context object that’s passed into handlers\n-   Removing the need to pass in metadata\n-   Renaming items for consistency\nWe’ve outlined the changes below.\n## Menu items\nMenu items have been simplified:\n-   `addAction` and `addActions` are now `addMenuItem`\n-   description has been dropped as a key\n-   the new context.ui shows a form or a toast instead of returns\n-   forms are created using Devvit.createForm\n-   `handler` has been renamed `onPress`\n-   no need to pass import-specific types:\n    -   context: Context.POST → location: ‘post’ or location: \\[‘post’, ‘comment’\\]\n    -   userContext: UserContext.Moderator → forUserType: ‘moderator’\n```ts\nDevvit.addMenuItem({\n  label: 'Remind me later',\n  location: 'post',\n  onPress: (event, context) => {\n    //  if you want to show a form\n    context.ui.showForm(remindMeForm);\n\n    // if you want to show a toast\n    context.ui.showToast('hello');\n  },\n});\n\nconst remindMeForm = Devvit.createForm(\n  {\n    fields: [{ name: 'when', label: 'When?', type: 'string' }],\n    title: 'Remind me',\n    acceptLabel: 'Schedule',\n  },\n  remindMeHandler\n);\n\nasync function remindMeHandler(event: FormOnSubmitEvent, context: Devvit.Context) {\n  // remind me code here to do something after submitting form\n}\n```\n### Dynamic forms\nBecause we allow data as an argument in createForm, you can now create dynamic forms.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Migration guide",
        "Menu items",
        "Dynamic forms"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Migration guide, Triggers</path>\n```ts\nimport { Devvit } from '@devvit/public-api';\n\nconst dynamicForm = Devvit.createForm(\n  (data) => {\n    console.log(data);\n\n    return {\n      fields: [\n        {\n          name: 'when',\n          label: `a string (default: ${data.text})`,\n          type: 'string',\n          defaultValue: data.text,\n        },\n      ],\n      title: 'Rule Form',\n      acceptLabel: 'Send Rule',\n    };\n  },\n  ({ values }, ctx) => {\n    return ctx.ui.showToast(`You sent ${values.when}`);\n  }\n);\n\nDevvit.addMenuItem({\n  label: 'Show a dynamic form',\n  location: 'post',\n  onPress: async (_, { ui }) => {\n    const randomString = Math.random().toString(36).substring(7);\n\n    const formData = {\n      text: randomString,\n    };\n\n    return ui.showForm(dynamicForm, formData);\n  },\n});\n\nexport default Devvit;\n```\n## Triggers\n-   There's no need to pass in a specific Devvit event type: `events: Devvit.Trigger.PostSubmit` is now `event: 'PostSubmit`\n-   `handler` has been renamed to `onEvent`\n```ts\nDevvit.addTrigger({\n  event: 'PostSubmit',\n  onEvent: (event, context) => {\n    context.scheduler.runJob({ job: test - job });\n  },\n});\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Migration guide",
        "Triggers"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Migration guide, Plugins</path>\n## Scheduler\n-   Scheduler is now part of the context object\n-   The following have been renamed:\n    -   `Devvit.addSchedulerHandler` is now `Devvit.addSchedulerJob`\n    -   `Scheduler.schedule` is now `scheduler.runJob` and `scheduler.cancelJob`\n    -   `handler` is now `onRun`\n```ts\nDevvit.addSchedulerJob({\n  name: 'daily-thread',\n  onRun: async (job, context) => {\n    const subreddit = await context.reddit.getCurrentSubreddit();\n    const resp = await context.reddit.submitPost({\n      subredditName: subreddit.name,\n      title: 'Daily Thread',\n      text: 'This is a daily thread, commment here!',\n    });\n  },\n});\n\n// run job once (within a menu item or trigger)\ncontext.scheduler.runJob({ when: now, job: 'test-job' });\n\n// run recurring job (within a menu item or trigger)\n// for tips on cron syntax use https://crontab.guru/\ncontext.scheduler.runJob({ cron: '* 12 * * * ', job: 'test-job' });\n```\n## Plugins\nThe Reddit API, Fetch, and KV store plugins now use `Devvit.configure` to define the capabilities you want to use (these also can be found on the context object in a handler). This replaces `Devvit.use`.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Migration guide",
        "Plugins"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Migration guide, Plugins</path>\n```ts\n// can omit or set to false if not using\nDevvit.configure({\n  redditAPI: true,\n  http: true, // for fetch\n  kvStore: true,\n});\n```\nCheck out the following examples of the plugins in use.\n### Reddit API\n```ts\n// can omit or set to false if not using\nDevvit.configure({\n  redditAPI: true,\n});\n\nDevvit.addMenuItem({\n  label: 'Reply to post',\n  location: 'post',\n  onPress: async (event, context) => {\n    const response = await context.reddit.submitComment({\n      id: `t3_${context.postId}`,\n      text: 'hello world!',\n    });\n    // if you want to show a toast\n    context.ui.showToast('Successfully replied!');\n  },\n});\n\n// alernative w/ deconstruction\n\nDevvit.addMenuItem({\n  label: 'Reply to post',\n  location: 'post',\n  onPress: (event, { reddit }) => {\n    await reddit.submitComment({\n      id: `t3_${context.postId}`,\n      text: 'hello world!',\n    });\n    // if you want to show a toast\n    context.ui.showToast('Successfully replied!');\n  },\n});\n```\n### Fetch\n```ts\nDevvit.configure({\n  http: true,\n});\n\nDevvit.addMenuItem({\n  label: 'Fetch a response',\n  location: 'post',\n  onPress: async (event, context) => {\n    const response = await fetch('https://example.com', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ content: comment?.body }),\n    });\n    // if you want to show a toast\n    context.ui.showToast(response);\n  },\n});\n```\n### KV store\n```ts\nDevvit.configure({\n  kvStore: true,\n});\n\nDevvit.addMenuItem({\n  label: 'Get from kv store',\n  location: 'post',\n  onPress: async (event, context) => {\n    const value = await context.kvStore.get('test-key');\n    context.ui.showToast(value);\n  },\n});\n```\n### App configurations",
    "metadata": {
      "type": [
        "code",
        "text",
        "heading"
      ],
      "path": [
        "Migration guide",
        "Plugins"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Migration guide, Installation</path>\n```ts\n// set app configurations\nDevvit.addSettings([\n  {\n    type: 'string',\n    name: 'apiKey',\n    label: 'API Key',\n    onValidate: ({ value }) => {\n      if (!value || value.length < 10) {\n        return 'API Key must be at least 10 characters long';\n      }\n    },\n  },\n]);\n\n// retreiving app configurations\n\nDevvit.addMenuItem({\n  label: 'Get settings values',\n  location: 'post',\n  onPress: async (event, context) => {\n    console.log('event: ', event);\n\n    const singleSetting = await context.settings.get('apiKey');\n    const allSettings = await context.settings.getAll();\n\n    console.log('All settings: ', allSettings);\n    console.log('Single setting: ', singleSetting);\n  },\n});\n```\n## Installation\n:::note These syntax changes will require you to rewrite your app code. :::\nTo update to this version of devvit, you should update your devvit CLI. If you want to update an existing project, you should use the command below.\nTo update, run the following commands:\n```bash\n$ npm i -g devvit\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Migration guide",
        "Installation"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Migration guide, Typescript Notes, _ argument</path>\nTo update dependencies in an existing project:\n```bash\n$ devvit update app\n```\n### Moving from public-api-next\nIf you were using `'public-api-next'` please run the following steps in your project directory to update your app:\n-   `devvit update app`\n-   `npm remove @devvit/public-api-next`\n-   `npm i`\n-   In the app code, change `import { Devvit } from '@devvit/public-api-next';` to `import { Devvit } from '@devvit/public-api';`\n## Typescript Notes\n### Object deconstruction for context\nSince the context object has different objects attached to it, you can use typescript deconstruction to specify the object you are looking to use to simplify code.\n```ts\n// alernative w/ deconstruction\nDevvit.addMenuItem({\n  label: 'Reply to post',\n  location: 'post',\n  onPress: (event, { reddit, ui }) => {\n    await reddit.submitComment({\n      id: `t3_${context.postId}`,\n      text: 'hello world!',\n    });\n    // if you want to show a toast\n    ui.showToast('Successfully replied!');\n  },\n});\n```\n### _ argument\nIn some examples above, we are prefixing `_` in front of the argument, this avoids typecheck error for unused variables, but is not necessary.",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading"
      ],
      "path": [
        "Migration guide",
        "Typescript Notes",
        "_ argument"
      ],
      "level": 2
    }
  }
]
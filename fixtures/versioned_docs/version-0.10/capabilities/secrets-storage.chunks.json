[
  {
    "pageContent": "<path>Secrets storage, Defining secrets</path>\n# Secrets storage\nStore sensitive data in your app.\nThere are times when you’ll want to store information in your app that should not be visible to users. Secrets are variables that contain sensitive information like API keys, credentials and tokens. Devvit lets you store and access secrets in three steps:\n-   Define secrets in the app.\n-   Provide secrets via Devvit CLI.\n-   Retrieve secrets in the app.\n## Defining secrets\nYou can use the existing `Devvit.addSettings` DX to define secrets.\n```tsx\nimport { Devvit } from '@devvit/public-api';\n\nDevvit.addSettings([\n  {\n    // Name of the setting which is used to retrieve the setting value\n    name: 'open-ai-api-key',\n    // This label is used to provide more information in the CLI\n    label: 'Open AI API key',\n    // Type of the setting value\n    type: 'string',\n    // Marks a setting as sensitive info - all secrets are encrypted\n    isSecret: true,\n    // Defines the access scope\n    // app-scope ensures only developers can create/replace secrets via CLI\n    scope: 'app',\n  },\n]);\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Secrets storage",
        "Defining secrets"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Secrets storage, Retrieving secrets</path>\n## Providing secrets\nYou will be able to list app-scoped keys via the CLI. Use the `devvit settings` command in a Devvit project.\n```bash\ndevvit settings list\n\nKey               Label            Is this a secret?   Type\n───────────────  ──────────────    ─────────────────   ──────\nopen-ai-api-key  Open AI API key    true            STRING\n```\nOnce you access the keys, you can assign values to the secret keys. This operation can only be performed by app developers, not mods or installers.\n```bash\ndevvit settings set open-ai-api-key\n\n? Enter the value you would like to assign to the variable open-ai-api-key : <value>\n\nUpdating app settings... ✅\nSuccessfully added app settings for open-ai-api-key!\n```\n## Retrieving secrets\nOnce you’ve stored the secrets via CLI, your app can access the secrets during invocations using `context.settings.get(secretName)` method.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Secrets storage",
        "Retrieving secrets"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Secrets storage, Retrieving secrets</path>\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\nDevvit.configure({\n  http: true,\n});\n\nDevvit.addSettings([\n  {\n    name: 'open-ai-api-key',\n    label: 'Open AI API key',\n    type: 'string',\n    isSecret: true,\n    scope: 'app',\n  },\n]);\n\nasync function fetchResponse(context: Devvit.Context): Promise<string> {\n  try {\n    const apiKey = await context.settings.get('open-ai-api-key');\n\n    const res = await fetch('https://api.openai.com/v1/chat/completions', {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      method: 'POST',\n      body: JSON.stringify({\n        model: 'gpt-4-turbo',\n        messages: [{ role: 'system', content: 'You are a helpful assistant.' }],\n      }),\n    });\n\n    const json = await res.json();\n\n    return json?.choices?.length > 0 ? json?.choices[0]?.message?.content : 'No response';\n  } catch (e: any) {\n    console.log('Fetch error ', e);\n    return e.toString();\n  }\n}\n\nDevvit.addCustomPostType({\n  name: 'Devvit - Ask GPT',\n  render: (context) => {\n    const [answer, setAnswer] = useState<string>('');\n\n    async function onPress() {\n      const response = await fetchResponse(context);\n      setAnswer(response || 'No Response');\n    }\n\n    return (\n      <blocks height=\"tall\">\n        <vstack alignment=\"center middle\" height=\"100%\" gap=\"large\">\n          <button appearance=\"primary\" onPress={onPress}>\n            {'Ask GPT'}\n          </button>\n          <text wrap>{answer}</text>\n        </vstack>\n      </blocks>\n    );\n  },\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 2,
      "path": [
        "Secrets storage",
        "Retrieving secrets"
      ]
    }
  },
  {
    "pageContent": "<path>Secrets storage, Limitations</path>\n## Limitations\n-   At least one app installation is required before you can store secrets via the CLI. You can use Devvit [playtest](/docs/get-started/playtest.md) once with the latest `Devvit.addSettings` config to accomplish this.\n-   App setting values are currently not surfaced in the CLI.",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "level": 2,
      "path": [
        "Secrets storage",
        "Limitations"
      ]
    }
  }
]
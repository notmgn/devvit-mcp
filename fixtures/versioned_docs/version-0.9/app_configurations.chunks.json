[
  {
    "pageContent": "<path>App configurations, Examples, Dropdown, Define a type of object (ie Devvit.addAction context)</path>\n# App configurations\nDevvit gives you the flexibility to add configuration settings to your app.\nOnce the app is installed, the configuration settings are available on the Install Settings page. Moderators add the required input and save the changes to configure the app. Note that these settings are limited to the subreddit where the app is installed, so your app can be uniquely configured to each subreddit’s specific needs.\n![Config Form Example](./assets/config_form_blank_example.png)\n## Input types\nThere are currently four supported types of input:\n-   Text\n-   Boolean\n-   Number\n-   Dropdown selection\n## Examples\n### Text\nRenders an input field that accepts text responses.\n#### Discord Webhook URL\n![Text Input Example](./assets/form_input_example_text.png)\n### Boolean\nRenders a switch to toggle on (true) or off (false).\n#### Comment lock\n![Boolean Input Example](./assets/form_input_example_boolean.png)\n### Number\nRenders an input field that accepts text responses.\n#### Vote threshold\n![Number Input Example](./assets/form_input_example_number.png)\n### Dropdown\nRenders a dropdown menu where moderator can select one or more developer-defined options.\n#### Define a type of object (ie Devvit.addAction context)\n![Dropdown Input Example](./assets/form_input_example_selection.png)",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "App configurations",
        "Examples",
        "Dropdown",
        "Define a type of object (ie Devvit.addAction context)"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>App configurations, Configuring settings within your app</path>\n## Prerequisites\nBefore you can start adding settings, make sure you’ve completed the [Devvit Quickstart](quickstart) and have a test app up and running.\n## Configuring settings within your app\nYou can use the following code snippets as a guide to adding configuration settings to your app:\n-   First, make sure this import is at the top of your file.\n```ts\nimport { Devvit } from '@devvit/public-api';\n```\n-   Use `Devvit.addSettings` to define any input fields you want to add to your settings form. Each field needs to be assigned a type, name, and label. You can provide the dropdown options for selection fields, as well as determine if the user can select more than one option within the dropdown. The label is the only text that will be visible on the form, so use this to communicate what the moderator should enter in each input field.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "App configurations",
        "Configuring settings within your app"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>App configurations, Configuring settings within your app, Input validation</path>\n```ts\nDevvit.addSettings([\n  {\n    type: 'string',\n    name: 'text-input',\n    label: 'Enter your text input:',\n    onValidate: async ({ value }) => {\n      if (value !== 'bird') {\n        return 'Word must be \"bird\"';\n      }\n    },\n  },\n  {\n    type: 'boolean',\n    name: 'bool-input',\n    label: 'Use the switch to determine if some setting should be enabled:',\n  },\n  {\n    type: 'select',\n    name: 'select-input',\n    label: 'Select one of the options:',\n    options: [\n      {\n        label: 'Option 1',\n        value: 'Option 1',\n      },\n      {\n        label: 'Option 2',\n        value: 'Option 2',\n      },\n    ],\n    multiSelect: false,\n  },\n  {\n    type: 'select',\n    name: 'multiselect-input',\n    label: 'Select multiple options:',\n    options: [\n      {\n        label: 'Option 1',\n        value: 'Option 1',\n      },\n      {\n        label: 'Option 2',\n        value: 'Option 2',\n      },\n      {\n        label: 'Option 3',\n        value: 'Option 3',\n      },\n    ],\n    multiSelect: true,\n  },\n  {\n    type: 'number',\n    name: 'number-input',\n    label: 'Enter your number input:'',\n  },\n  {\n    type: 'paragraph',\n    name: 'paragraph-input',\n    label: 'Enter your paragraph input:',\n  },\n  {\n    type: 'group',\n    label: 'This is a GROUP field',\n    fields: [\n      {\n        type: 'string',\n        name: 'group-text-input',\n        label: 'Group: Enter your text input:',\n      },\n      {\n        type: 'boolean',\n        name: 'group-bool-input',\n        label: 'Group: Use the switch to determine if some setting should be enabled:',\n      },\n    ],\n  },\n]);\n```\n### Input validation\n![Input validation](./assets/form_validation_error.png)\nDevvit app configurations also support input validation. As the app developer, you can set restrictions on what kind of input must be entered in each field.\nFor example, setting a maximum number:\n```ts\nonValidate: (event) => {\n  if (event.value! > 10) {\n    return 'Number too high!';\n  }\n};\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "App configurations",
        "Configuring settings within your app",
        "Input validation"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>App configurations, Retrieving settings within your app</path>\nTo use validation, add the `onValidate` handler to the settings field object, like this:\n```ts\n  {\n    type: 'number',\n    name: 'number-input',\n    label: 'Enter your number input:',\n    onValidate: (event) => {\n      if (event.value! > 10) { return 'Number too high! Must be lower than 10.' }\n    }\n  },\n```\n## Retrieving settings within your app\nAfter you've written the settings for your app, you can see the input that has been entered by the moderator by using `getSettings`.\n-   Add the following imports to the top of your file:\n```ts\nimport { Devvit, Context, getSetting, getSettings } from '@devvit/public-api';\n```\n-   Use `Devvit.addAction` to create a menu item that will trigger a toast message containing the form input.\n```ts\nDevvit.addAction({\n  name: 'Test Action',\n  description: '',\n  context: Context.SUBREDDIT,\n  async handler(_event, metadata) {\n    // to get all settings\n    const settings = await getSettings(metadata);\n\n    // to get an individual setting\n    const textFieldInput = await getSetting('text-input', metadata);\n\n    return {\n      success: true,\n      message: JSON.stringify(textFieldInput),\n    };\n  },\n});\n```",
    "metadata": {
      "type": [
        "text",
        "code",
        "heading"
      ],
      "path": [
        "App configurations",
        "Retrieving settings within your app"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>App configurations, Retrieving settings within your app</path>\n![Settings input retrieval](./assets/get_settings_toast_output.png)",
    "metadata": {
      "type": [
        "text"
      ],
      "level": 2,
      "path": [
        "App configurations",
        "Retrieving settings within your app"
      ]
    }
  }
]
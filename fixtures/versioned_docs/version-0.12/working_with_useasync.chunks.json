[
  {
    "pageContent": "<path>Working with useAsync, Blocking versus non-blocking, With useAsync (non-blocking) example</path>\n# Working with useAsync\n:::note This feature is experimental, which means the design is not final but it's still available for you to use. :::\n`useAsync` is a hook that allows your app to perform server side calls like `redis.get` or `getCurrentUser` without blocking the render process.\n## Blocking versus non-blocking\nThe code you write in Javascript can be blocking or non-blocking. To keep applications speedy, non-blocking code is preferred.\nBlocking code produces a waterfall of actions. One line must happen after another, so the speed in which a program can render takes a large hit. We want to avoid waterfalls to provide a nice experience for users.\n### Without useAsync (blocking) example\n```tsx\nconst App = () => {\n  // This will block the render until data is fetched\n  const [message] = useState(async () => await redis.get('welcomeMessage'));\n\n  return <text>{message}</text>;\n};\n```\n### With useAsync (non-blocking) example\n```tsx\nconst App = () => {\n  const { data: message, loading, error } = useAsync(async () => await redis.get('welcomeMessage'));\n\n  return (\n    <vstack>\n      {loading && <text>Loading...</text>}\n      {error && <text>Error fetching message</text>}\n      {message && <text>{message}</text>}\n    </vstack>\n  );\n};\n```\nThis example displays “Loading…” immediately while fetching the data.",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Working with useAsync",
        "Blocking versus non-blocking",
        "With useAsync (non-blocking) example"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Working with useAsync, Understanding useAsync</path>\n## Understanding useAsync\n### Syntax\n```ts\nconst { data, loading, error } = useAsync(asyncFunction, { depends: {JSON object}, finally: () => { function }  });\n```\n-   asyncFunction: an asynchronous function that must return a valid JSON value. Note that setState is not allowed in this function. Use the finally parameter if you need to use setState (see the example below).\n-   depends (optional): a JSON object or array of JSON objects that, when changed, will cause the asyncFunction to re-execute.\n-   finally (optional): a callback function that runs after the async operation completes regardless of success or failure. Ideal for state updates (i.e. calls to setState) and side effects.\n### Return values\n-   data: the data returned from the initializer.\n-   loading: a boolean that denotes if it is loading or not.\n-   error: an error if the request failed.\n**The initializer for `useAsync` (the first argument of the function) must return a valid JSON value.** This differs from React due to how Devvit components work across server and client boundaries.\n### Example: fetching the time and setting state\n```ts\nuseAsync(\n  async () => {\n    const response = await fetch(`https://date.api/today?timezone=${timezone}`);\n    return response.json();\n  },\n  {\n    depends: [timezone],\n    finally: (data, error) => {\n      if (error) {\n        console.error('Failed to load date data:', error);\n      } else {\n        setTodayDate(data['currentDate']);\n      }\n    },\n  }\n);\n```\n### Example: fetching user data",
    "metadata": {
      "type": [
        "heading",
        "code",
        "text"
      ],
      "path": [
        "Working with useAsync",
        "Understanding useAsync"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Working with useAsync, Understanding useAsync, Example: complete application</path>\n```ts\n// A normal useAsync function\nconst {\n  data: username,\n  loading: usernameLoading,\n  error: usernameError,\n} = useAsync(async () => {\n  const user = await getCurrentUser();\n\n  return user?.username ?? null;\n});\n\n// A dependent useAsync function\nconst {\n  data: userDetails,\n  loading: userDetailsLoading,\n  error: userDetailsError,\n} = useAsync(\n  // This will run every time the value in depends changes\n  async () => {\n    if (!username) return null;\n\n    const resp = await fetch(`https://some-api/get-user-details/${username}`);\n    return await resp.json();\n  },\n  {\n    // NOTE: This will be deep equality for objects and arrays!\n    depends: username,\n  }\n);\n```\n### Example: complete application\nThis a simple application that leverages useAsync to fetch data in a non-blocking way and updates the app whenever the page changes.\n```ts\nimport { useAsync, useState } from '@devvit/public-api';\n\nconst App = () => {\n  const [count, setCount] = useState(1);\n\n  const { data, loading, error } = useAsync(\n    async () => {\n      const response = await fetch(`https://xkcd.com/${count}/info.0.json`);\n      if (!response.ok) throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n      return await response.json();\n    },\n    { depends: [count] }\n  );\n\n  return (\n    <vstack alignment=\"center middle\" height=\"100%\" gap=\"small\">\n      <text size=\"large\">XKCD Titles</text>\n      <vstack>\n        {loading && <text>Loading...</text>}\n        {error && (\n          <text color=\"red\" wrap={true}>\n            {error.message}\n          </text>\n        )}\n        {data && <text>{data.title}</text>}\n      </vstack>\n      <text>Comic Number: {count}</text>\n      <button onPress={() => setCount((prev) => prev + 1)}>Increment</button>\n    </vstack>\n  );\n};\n\n//add your custom post\nDevvit.addCustomPostType({\n  name: 'AppName',\n  description: 'Using useAsync with XKCD API',\n  render: App,\n});\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Working with useAsync",
        "Understanding useAsync",
        "Example: complete application"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Working with useAsync, When to use useAsync and useState</path>\n## When to use useAsync and useState\nIn most cases, you'll want to use `useAsync` over `useState` to keep your app snappy. One downside is that you need to handle `loading` and `error` when using `useAsync` or `useState`.\nOne situation where `useState` could be preferable is if your app only has one request and it must be resolved in order to show any part of the app.\nAnother time to consider `useState` is if you need to update the value you fetched and display the new result to the user. `useState` provides a better API for that, but keep in mind you still need to persist the updates to Redis. We will be working on making synced updates easier in the future.\n:::note There isn't an easy way to update `useAsync` data based off of an action in the app at the moment. We are working on a better way to allow this in the future. :::",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "level": 2,
      "path": [
        "Working with useAsync",
        "When to use useAsync and useState"
      ]
    }
  }
]
[
  {
    "pageContent": "<path>Namespace: Devvit, Type Aliases, StringChildren</path>\n# Namespace: Devvit\n## Table of contents\n### Namespaces\n-   [Blocks](Devvit.Blocks.md)\n### Type Aliases\n-   [BlockComponent](Devvit.md#blockcomponent)\n-   [BlockComponentProps](Devvit.md#blockcomponentprops)\n-   [Context](Devvit.md#context)\n-   [CustomPostComponent](Devvit.md#custompostcomponent)\n-   [ElementChildren](Devvit.md#elementchildren)\n-   [Fragment](Devvit.md#fragment)\n-   [StringChild](Devvit.md#stringchild)\n-   [StringChildren](Devvit.md#stringchildren)\n### Functions\n-   [createElement](Devvit.md#createelement)\n## Type Aliases\n### BlockComponent\nƬ **BlockComponent**<`P`\\>: (`props`: [`BlockComponentProps`](Devvit.md#blockcomponentprops)<`P`\\>, `context`: [`Context`](Devvit.md#context)) => `JSX.Element`\n#### Type parameters\n| Name | Type |\n|---|---|\n| P | {} |\n#### Type declaration\n▸ (`props`, `context`): `JSX.Element`\n##### Parameters\n| Name | Type |\n|---|---|\n| props | BlockComponentProps<P> |\n| context | Context |\n##### Returns\n`JSX.Element`\n### BlockComponentProps\nƬ **BlockComponentProps**<`P`\\>: `P` & { `children?`: `JSX.Children` }\n#### Type parameters\n| Name | Type |\n|---|---|\n| P | {} |\n### Context\nƬ **Context**: [`ContextAPIClients`](../README.md#contextapiclients) & [`BaseContext`](../README.md#basecontext)\nThe current app context of the event or render.\n### CustomPostComponent\nƬ **CustomPostComponent**: (`context`: [`Context`](Devvit.md#context)) => `JSX.Element`\n#### Type declaration\n▸ (`context`): `JSX.Element`\n##### Parameters\n| Name | Type |\n|---|---|\n| context | Context |\n##### Returns\n`JSX.Element`\n### ElementChildren\nƬ **ElementChildren**: `JSX.Element` | `JSX.Children` | `undefined`\n### Fragment\nƬ **Fragment**: `JSX.Fragment`\n### StringChild\nƬ **StringChild**: [`Fragment`](Devvit.md#fragment) | `string` | `number`\n### StringChildren\nƬ **StringChildren**: [`StringChild`](Devvit.md#stringchild) | ([`StringChild`](Devvit.md#stringchild) | [`StringChild`](Devvit.md#stringchild)\\[\\])\\[\\] | `undefined`",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Namespace: Devvit",
        "Type Aliases",
        "StringChildren"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Namespace: Devvit, Functions, createElement, Returns</path>\n## Functions\n### createElement\n▸ **createElement**(`type`, `props`, `...children`): [`BlockElement`](../README.md#blockelement)\n#### Parameters\n| Name | Type |\n|---|---|\n| type | keyof IntrinsicElements |\n| props | undefined | {} |\n| ...children | Children[] |\n#### Returns\n[`BlockElement`](../README.md#blockelement)",
    "metadata": {
      "type": [
        "heading",
        "text",
        "table"
      ],
      "path": [
        "Namespace: Devvit",
        "Functions",
        "createElement",
        "Returns"
      ],
      "level": 2
    }
  }
]
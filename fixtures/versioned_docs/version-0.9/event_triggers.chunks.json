[
  {
    "pageContent": "<path>Event triggers, Example</path>\n# Event triggers\nAn event trigger allows your app to automatically respond to a userâ€™s action. For example, if you set the OnSubredditSubscribe trigger, the app will automatically respond when a user joins the community.\n## Supported triggers\n### Setup triggers\n-   OnAppInstall\n-   OnAppUpgrade\n### Reddit event triggers\n-   OnPostSubmit\n-   OnPostUpdate\n-   OnPostReport\n-   OnCommentSubmit\n-   OnCommentUpdate\n-   OnCommentReport\n-   OnSubredditSubscribe\n## Example\nThis example adds supported event triggers that will automatically execute your app. Once a trigger is added, your app listens for the event, and the event handler executes the action.",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Event triggers",
        "Example"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Event triggers, Example</path>\n```ts\nimport {\n  CommentReport,\n  CommentSubmit,\n  CommentUpdate,\n  PostSubmit,\n  Metadata,\n  SubredditSubscribe,\n} from '@devvit/protos';\nimport { Devvit, getFromMetadata, Header } from '@devvit/public-api';\n\n// Logging on a PostSubmit event\nDevvit.addTrigger({\n  event: Devvit.Trigger.PostSubmit,\n  async handler(request: PostSubmit, metadata?: Metadata) {\n    console.log(`Received OnPostSubmit event:\\n${JSON.stringify(request)}`);\n  },\n});\n\n// Logging on multiple events: PostUpdate and PostReport\nDevvit.addTrigger({\n  events: [Devvit.Trigger.PostUpdate, Devvit.Trigger.PostReport],\n  handler(request) {\n    if (request.type == Devvit.Trigger.PostUpdate) {\n      console.log(`Received OnPostUpdate event:\\n${JSON.stringify(request)}`);\n    } else if (request.type === Devvit.Trigger.PostReport) {\n      console.log(`Received OnPostReport event:\\n${JSON.stringify(request)}`);\n    }\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.CommentSubmit,\n  async handler(request: CommentSubmit, metadata?: Metadata) {\n    if (request.author?.id === getFromMetadata(Header.AppUser, metadata)) {\n      console.log('hey! my app created this comment; not going to respond');\n      return;\n    }\n    console.log(`Received OnCommentSubmit event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.CommentUpdate,\n  async handler(request: CommentUpdate, metadata?: Metadata) {\n    console.log(`Received OnCommentUpdate event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.CommentReport,\n  async handler(request: CommentReport, metadata?: Metadata) {\n    console.log(`Received OnCommentReport event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.SubredditSubscribe,\n  async handler(request: SubredditSubscribe, metadata?: Metadata) {\n    console.log(`Received OnSubredditSubscribe event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.AppInstall,\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 2,
      "path": [
        "Event triggers",
        "Example"
      ]
    }
  },
  {
    "pageContent": "<path>Event triggers, Example</path>\n```ts\n  async handler(request: AppInstall) {\n    console.log(`Received AppInstall event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nDevvit.addTrigger({\n  event: Devvit.Trigger.AppUpgrade,\n  async handler(request: AppUpgrade) {\n    console.log(`Received AppUpgrade event:\\n${JSON.stringify(request)}`);\n  },\n});\n\nexport default Devvit;\n```\n:::note\nBe careful creating recursive triggers (like a comment trigger that creates a comment). This could cause your app to crash. To avoid this, check to see if the content creator is the app. The `CommentSubmit` example above shows how to do this.\n:::",
    "metadata": {
      "type": [
        "code",
        "text"
      ],
      "level": 2,
      "path": [
        "Event triggers",
        "Example"
      ]
    }
  }
]
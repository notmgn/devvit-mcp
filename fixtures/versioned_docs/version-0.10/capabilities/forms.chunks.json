[
  {
    "pageContent": "<path>Forms, Using forms, Experience posts</path>\n# Forms\nA form lets your app ask users to input and submit data. Forms can be defined with a simple [form object](#form-object) that takes a [list of fields](#supported-fields-types), and an [onSubmit handler](#on-submit-handler).\n![A form dialog](../assets/capabilities/forms/forms-dialog.png)\n## Using forms\nThere are several ways to add a form to your app, and the method you'll use depends on what youâ€™re doing.\n-   For [experience posts](#experience-posts), use the `context.ui.useForm` hook.\n-   For [menu actions](#menu-actions), use the [`devvit.createForm`](/docs/api/public-api/classes/Devvit-1.md#createform) method.\n-   For [app configurations](#app-configurations), use the [`devvit.addSettings`](/docs/api/public-api/classes/Devvit-1.md#addsettings) method.\n### Experience posts\nThis example shows an experience post with a text label and a button that triggers a form. When the form is submitted, the onSubmit handler takes the form input and manipulates state with [`useState`](/docs/working_with_usestate.md). The state update triggers a rerender and the new data is displayed.\n```tsx\nimport { Devvit, useState, useForm } from '@devvit/public-api';\n\nDevvit.addCustomPostType({\n  name: 'TemplateName',\n  render: (context) => {\n    const [name, setName] = useState('unknown');\n\n    const myForm = useForm(\n      {\n        fields: [\n          {\n            type: 'string',\n            name: 'name',\n            label: 'Name',\n          },\n        ],\n      },\n      (values) => {\n        // onSubmit handler\n        setName(values.name);\n      }\n    );\n\n    return (\n      <vstack gap=\"medium\" height=\"100%\" alignment=\"middle center\">\n        <text>Hello {name}!</text>\n        <button\n          onPress={() => {\n            context.ui.showForm(myForm);\n          }}\n        >\n          Set name\n        </button>\n      </vstack>\n    );\n  },\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Using forms",
        "Experience posts"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Forms, Using forms, App configurations</path>\n[Explore example in playground](https://developers.reddit.com/play#pen/N4IgdghgtgpiBcIBiB7ATlABASzJgogB4AOMa2MYAxjJgAooDOALiADQiNpUIjZTF0zTMEwARGADdJ2YQF9MAMzQosAcgACAEykzmAemIBXAEYAbbFQC0EYtjUBuADpgXE6bIB0ELVoDCRiyqDCwAKgCepAAUwC6YmJCw8JhqoTACZhDMMABy0DBqbHGYaJQ6aMlRVChg2YTMAJSYALwAfCLF8dVgLJgA2okwbJiMMMx5sAC6LZjddcyegTAAysxZMFFqRmAA1mAoAO5gag3OrnjxszW9UOGoGDNzMPWLo-dQUZ2XsReXl4oUMxaRjJPpfP7xH4Q6GYZiRGDJNQschgADmhXBMMGiMGGN+MPimRMMDMiImBSK+OhckpBMmtIhNMxUUkEDMRhgjCabQ6VMuo3G+RZbI5jE8g1OmLkX0l5z+pWYRjQeE+fIAPJIWBAqDtMKjbM0nCBYFpsEYoEbMAALGDYVFW5iGkAARgADK6AKSWtl2sCwWpOqDYXxmWg0WpkI2tTHxNXzVoACRJZhQIkGcgAhGr9PGY5g1SYjMxmDU8-EanRSoxGM1gFFue0oQTLk8XkZsJ5GFbDu8ord3rLm5g5NK+fFo2PLssxgl8nns4XizUJ9Ds5q1jqV5dB8PKXJZS5noI0MIdIoIEYzMJ3HoHOwQJIyIxsDUEM65EA).\n### Menu actions\nThis example defines a new form and a onSubmit handler called `myForm` using the `devvit.createForm` method. This form is shown via a [menu action](./menu-actions.md) using `context.ui.showForm()`.\n```ts\nimport { Devvit } from '@devvit/public-api';\n\nconst myForm = Devvit.createForm(\n  {\n    fields: [\n      {\n        type: 'string',\n        name: 'food',\n        label: 'What is your favorite food?',\n      },\n    ],\n  },\n  (event, context) => {\n    // onSubmit handler\n    context.ui.showToast({ text: event.values.food });\n  }\n);\n\nDevvit.addMenuItem({\n  label: 'Show a form',\n  location: 'subreddit',\n  onPress: async (_event, context) => {\n    context.ui.showForm(myForm);\n  },\n});\n\nexport default Devvit;\n```\n### App configurations\nFor more details see the [app configurations page](./app-configurations.md).",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code"
      ],
      "path": [
        "Forms",
        "Using forms",
        "App configurations"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Form object, Supported properties</path>\n## Form object\nThe form object enables you to customize the form container and the [list of form fields](#supported-fields-types) included. The form object is passed along to `context.ui.useForm`, [`devvit.createForm`](/docs/api/public-api/classes/Devvit-1.md#createform), or [`devvit.addSettings`](/docs/api/public-api/classes/Devvit-1.md#addsettings) to create the form.\n#### Usage\n```tsx\nconst myForm = {\n  title: 'My form',\n  description: 'This is my form. There are many like it, but this one is mine.',\n  fields: [\n    {\n      type: 'string',\n      name: 'food',\n      label: 'What is your favorite food?',\n    },\n    {\n      type: 'string',\n      name: 'drink',\n      label: 'What is your favorite drink?',\n    },\n  ],\n  acceptLabel: 'Submit',\n  cancelLabel: 'Cancel',\n};\n```\n#### Supported properties\n| Property | Supported types | Description |\n|---|---|---|\n| title | string undefined | An optional title for the form |\n| description | string undefined | An optional description for the form |\n| fields | FormField[] | The fields that will be displayed in the form |\n| acceptLabel | string undefined | An optional label for the submit button |\n| cancelLabel | string undefined | An optional label for the cancel button |",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code",
        "table"
      ],
      "path": [
        "Forms",
        "Form object",
        "Supported properties"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, String</path>\n## onSubmit handler\nWhen creating a form, you also specify a callback function that is called when the form is submitted. It takes two parameters: `event` and `context`. The `event` parameter contains the results of the form submission, while the `context` parameter represents the current app context of the form submission event.\n```ts\nconst onSubmitHandler = (event, context) => {\n  context.ui.showToast({ text: event.values.food });\n};\n\nconst myForm = Devvit.createForm(\n  {\n    fields: [\n      {\n        type: 'string',\n        name: 'food',\n        label: 'What is your favorite food?',\n      },\n    ],\n  },\n  onSubmitHandler\n);\n```\n:::note Note: The `context` object is not available in onSubmit handlers within the `useForm` hook. For experience posts, you already have access to the context element via the outer function's scope. :::\n## Supported fields types\nThe following field types are supported: [String](#string), [Select](#select), [Paragraph](#paragraph), [Number](#number), [Boolean](#boolean), and [Group](#group).\n### String\nA single-line text input.\n![String input](../assets/capabilities/forms/forms-string.png)\n#### Usage\n```ts\nconst stringField = {\n  type: 'string',\n  name: 'title',\n  label: 'Tournament title',\n};\n```\n#### Properties",
    "metadata": {
      "type": [
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "String"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, Select</path>\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| required | boolean undefined | If true the field will be required and the user will not be able to submit the form without filling it in. Defaults to false. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| defaultValue | ValueType undefined | The default value of the field. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n| placeholder | string undefined | Placeholder text for display before a value is present. |\n| isSecret | boolean undefined | Makes the form field secret. |\n### Select\nA dropdown menu with predefined options.\n![Select input](../assets/capabilities/forms/forms-select.png)\n#### Usage\n```ts\nconst selectField = {\n  type: 'select',\n  name: 'interval',\n  label: 'Update the leaderboard',\n  options: [\n    { label: 'Hourly', value: 'hourly' },\n    { label: 'Daily', value: 'daily' },\n    { label: 'Weekly', value: 'weekly' },\n    { label: 'Monthly', value: 'monthly' },\n    { label: 'Yearly', value: 'yearly' },\n  ],\n};\n```\n#### Properties",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "Select"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, Paragraph</path>\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| options | FieldConfig_Selection_Item[] | The list of options available. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| required | boolean undefined | If true the field will be required and the user will not be able to submit the form without filling it in. Defaults to false. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| defaultValue | string[] undefined | The default value of the field. Note that the default value is wrapped in an array to support multiple selected values. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n| multiSelect | boolean undefined | Enables users to select more than 1 item from the set. |\n### Paragraph\nA multi-line text input for longer responses.\n![Paragraph input](../assets/capabilities/forms/forms-paragraph.png)\n#### Usage\n```ts\nconst paragraphField = {\n  type: 'paragraph',\n  name: 'description',\n  label: 'Description',\n};\n```\n#### Properties",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "Paragraph"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, Number</path>\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| required | boolean undefined | If true the field will be required and the user will not be able to submit the form without filling it in. Defaults to false. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| defaultValue | ValueType undefined | The default value of the field. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n| placeholder | string undefined | Placeholder text for display before a value is present. |\n| lineHeight | number undefined | Sets the field height by number of lines. |\n### Number\nAn input for numerical values.\n![Number input](../assets/capabilities/forms/forms-number.png)\n#### Usage\n```ts\nconst numberField = {\n  type: 'number',\n  name: 'tokens',\n  label: 'Token balance',\n};\n```\n#### Properties",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "Number"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, Image</path>\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| required | boolean undefined | If true the field will be required and the user will not be able to submit the form without filling it in. Defaults to false. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| defaultValue | ValueType undefined | The default value of the field. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n### Boolean\nA yes/no or true/false type input.\n![Boolean input](../assets/capabilities/forms/forms-boolean.png)\n#### Usage\n```ts\nconst booleanField = {\n  type: 'boolean',\n  name: 'enable',\n  label: 'Enable the event',\n};\n```\n#### Properties\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| defaultValue | ValueType undefined | The default value of the field. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n### Image\nAn image upload field.",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "Image"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Supported fields types, Group</path>\n![Image input](../assets/capabilities/forms/forms-image.png)\n#### Usage\n```ts\nconst imageField = {\n  type: 'image', // This tells the form to expect an image\n  name: 'myImage',\n  label: 'Image goes here',\n  required: true,\n};\n```\n#### Properties\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| name | string | The name of the field. This will be used as the key in the values object when the form is submitted. |\n| label | string | The label of the field. This will be displayed to the user. |\n| helpText | string undefined | An optional help text that will be displayed below the field. |\n| required | boolean undefined | If true the field will be required and the user will not be able to submit the form without filling it in. Defaults to false. |\n| disabled | boolean undefined | If true the field will be disabled. Defaults to false. |\n| scope | SettingScopeType undefined | This indicates whether the field (setting) is an app level or install level setting. App setting values can be used by any installation. undefined by default. |\n| placeholder | string undefined | Placeholder text for display before a value is present. |\n| isSecret | boolean undefined | Makes the form field secret. |\n### Group\nA collection of related fields that allows for better readability.\n#### Usage\n```ts\nconst groupField = {\n  type: 'group',\n  label: 'This is a group of input fields',\n  fields: [\n    {\n      type: 'paragraph',\n      name: 'description',\n      label: 'How would you describe what happened?',\n    },\n    {\n      type: 'number',\n      name: 'score',\n      label: 'How would you rate your meal on a scale from 1 to 10?',\n    },\n  ],\n};\n```\n#### Properties",
    "metadata": {
      "type": [
        "text",
        "heading",
        "code",
        "table"
      ],
      "path": [
        "Forms",
        "Supported fields types",
        "Group"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Examples, One of everything</path>\n| Property | Supported types | Description |\n|---|---|---|\n| type | string | The desired field type. |\n| label | string | The label of the group that will be displayed to the user. |\n| fields | FormField[] | The fields that will be displayed in the group. |\n| helpText | string undefined | An optional help text that will be displayed below the group. |\n## Examples\nBelow is a collection of common use cases and patterns.\n### Dynamic forms\nInstead of passing a static Form, you can create a function that returns a Form. This enables us to dynamically determine which fields to show and what default values to populate them with. We can also pass along any data via the `context.ui.showForm` method's optional 2nd argument.\n```tsx\nimport { Devvit } from '@devvit/public-api';\n\nDevvit.configure({\n  redditAPI: true,\n});\n\nconst myForm = Devvit.createForm(\n  (data) => {\n    return {\n      fields: [\n        {\n          type: 'string',\n          name: 'username',\n          label: 'Username',\n          defaultValue: data.username,\n        },\n      ],\n      // Adding `as const` helps you get accurate types in the onSubmit function below\n      // This will only work if the function does not have any branching logic\n    } as const;\n  },\n  (event, context) => {\n    context.ui.showToast({\n      text: `Hello ${event.values.username}`,\n    });\n  }\n);\n\nDevvit.addMenuItem({\n  label: 'Show a dynamic form',\n  location: 'subreddit',\n  onPress: async (_event, context) => {\n    const user = await context.reddit.getCurrentUser();\n    const username = user?.username;\n    context.ui.showForm(myForm, { username });\n  },\n});\n\nexport default Devvit;\n```\n### One of everything\nThis example includes one of each of the [supported field types](#supported-fields-types).",
    "metadata": {
      "type": [
        "table",
        "heading",
        "text",
        "code"
      ],
      "path": [
        "Forms",
        "Examples",
        "One of everything"
      ],
      "level": 2
    }
  },
  {
    "pageContent": "<path>Forms, Examples, Multi-step forms</path>\n```tsx\nimport { Devvit } from '@devvit/public-api';\n\nconst exampleForm = Devvit.createForm(\n  {\n    title: 'My favorites',\n    description: 'Tell us about your favorite food!',\n    fields: [\n      {\n        type: 'string',\n        name: 'food',\n        label: 'What is your favorite food?',\n        helpText: 'Must be edible',\n        required: true,\n      },\n      {\n        label: 'About that food',\n        type: 'group',\n        fields: [\n          {\n            type: 'number',\n            name: 'times',\n            label: 'How many times a week do you eat it?',\n            defaultValue: 1,\n          },\n          {\n            type: 'paragraph',\n            name: 'what',\n            label: 'What makes it your favorite?',\n          },\n          {\n            type: 'select',\n            name: 'healthy',\n            label: 'Is it healthy?',\n            options: [\n              { label: 'Yes', value: 'yes' },\n              { label: 'No', value: 'no' },\n              { label: 'Maybe', value: 'maybe' },\n            ],\n            defaultValue: ['maybe'],\n          },\n        ],\n      },\n      {\n        type: 'boolean',\n        name: 'again',\n        label: 'Can we ask again?',\n      },\n    ],\n    acceptLabel: 'Submit',\n    cancelLabel: 'Cancel',\n  },\n  (event, context) => {\n    console.log(event.values);\n    context.ui.showToast('Thanks!');\n  }\n);\n\nDevvit.addMenuItem({\n  location: 'subreddit',\n  label: 'One of everything form',\n  onPress: (_event, context) => {\n    context.ui.showForm(exampleForm);\n  },\n});\n\nexport default Devvit;\n```\n### Multi-step forms\nAdd a multi-step dynamic form to an experience post",
    "metadata": {
      "type": [
        "code",
        "heading",
        "text"
      ],
      "path": [
        "Forms",
        "Examples",
        "Multi-step forms"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Examples, Multi-step forms</path>\n```tsx\nimport { Devvit, useState, useForm } from '@devvit/public-api';\n\nDevvit.configure({\n  redditAPI: true,\n});\n\nDevvit.addCustomPostType({\n  name: 'Multi-step Form',\n  render: (context) => {\n    const [name, setName] = useState('');\n    const [food, setFood] = useState('');\n    const [drink, setDrink] = useState('');\n\n    const form3 = useForm(\n      {\n        fields: [\n          {\n            type: 'string',\n            name: 'drink',\n            label: \"What's your favorite drink?\",\n            required: true,\n          },\n        ],\n      },\n      (values) => {\n        setDrink(values.drink);\n      }\n    );\n\n    const form2 = useForm(\n      {\n        fields: [\n          {\n            type: 'string',\n            name: 'food',\n            label: \"What's your favorite food?\",\n            required: true,\n          },\n        ],\n      },\n      (values) => {\n        setFood(values.food);\n        context.ui.showForm(form3);\n      }\n    );\n\n    const form1 = useForm(\n      {\n        fields: [\n          {\n            type: 'string',\n            name: 'name',\n            label: \"What's your name?\",\n            required: true,\n          },\n        ],\n      },\n      (values) => {\n        setName(values.name);\n        context.ui.showForm(form2);\n      }\n    );\n\n    function restart() {\n      setName('');\n      setFood('');\n      setDrink('');\n      context.ui.showForm(form1);\n    }\n\n    const isAnswered = name && food && drink;\n\n    return (\n      <vstack height=\"100%\" alignment=\"center middle\" gap=\"none\">\n        {isAnswered && (\n          <>\n            <text>Name: {name}</text>\n            <text>Favorite food: {food}</text>\n            <text>Favorite drink: {drink}</text>\n            <spacer size=\"large\" />\n            <button onPress={restart}>Restart</button>\n          </>\n        )}\n        {!isAnswered && <button onPress={restart}>Take questionnaire</button>}\n      </vstack>\n    );\n  },\n});\n\nDevvit.addMenuItem({\n  location: 'subreddit',\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 3,
      "path": [
        "Forms",
        "Examples",
        "Multi-step forms"
      ]
    }
  },
  {
    "pageContent": "<path>Forms, Examples, Multi-step forms</path>\n```tsx\n  label: 'Add post with multi-step form',\n  onPress: async (_event, context) => {\n    const currentSubreddit = await context.reddit.getCurrentSubreddit();\n    await context.reddit.submitPost({\n      title: 'Experience post with multi-step form',\n      subredditName: currentSubreddit.name,\n      preview: (\n        <vstack width=\"100%\" height=\"100%\" alignment=\"middle center\">\n          <text>Loading ...</text>\n        </vstack>\n      ),\n    });\n    context.ui.showToast('Submitted post!');\n  },\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 3,
      "path": [
        "Forms",
        "Examples",
        "Multi-step forms"
      ]
    }
  },
  {
    "pageContent": "<path>Forms, Examples, Image uploads</path>\n[Explore example in a playground](https://developers.reddit.com/play#pen/N4IgdghgtgpiBcICyBXANgFwJYFoDOGMADgAQBmA9gE5QlZgkwAeRMVWMYAxjCURQRAAaEHipcEILFH5UMJYCQAiMAG6qs8gL7kqFWgHIAAgBM1GjAHoiKAEZosXHBCJYDAbgA6YbyvWaAOi4KMDIsAHMUKhgACmBvEhJokxNNAEEABQBJeBIMKhQYIW8tAEovHzA-CwCIFIBhFAJ9DIEMABUAT1Y4hJJIWFyDVExcAmISADFqKANihiTOMypcmOCwQiYMUpIAXgA+BT7E9YISAG0BopI8GAwAOWgYAF09knXNjACmmABlDAghBiBgM5WO7xCZ3OlAoJiENzu01hr12EI2zC+P3+gNiILBCxOkPk5xM7DAAGt4bcMEoyeSUWjPt9btigXiKuDTvJKDQAMxvD4Y5kwaY0GLgxLxAmJGVhGBoEx4XLnCUyyWqtWJDDdGBDAhk8JzDWaq5DUn0clG6WamVoCC2eW5TwgADqAAtAQY8CROhQouQIKpqJpeOaKQB+Z3zG026IARxQWGSuXyhWjMcSWnTNue2ZlWdVMVUEDQhTwOwOR2tMuptItRZLZYCYfJ+JtWnB+M5RPIMwATAKQkyfqKoOLq1KM3KFUqLsb1dWbdrWHr8vRDXmM6aSAYYSYrRm1XaHWgna6PRgvT6-VQA0H2IRe7DI8J5zL44nk3kCkU3wXFyQuaqv+NoNqWMDlnshyTjG1JIiYYFNnubYxoKWzfFgAR4G6FAAO6jjEPJQLyKFqh20pdtKXK9jQACMg7ouhI4zOONowTa06Ksqb7sYey66ju+rrgeh6JNuBhXCJonHo6JDOu6nrer6-pXC+m4xh+SYwCYKY-upZH6YB6kgZqiEQRW0HGtSjywGZeABFcpGamhmKYdheEEURfZOZmnYctKZAoNw2AhIsBAQHIMQ7LxiTWU8wKghUNpwRQsIJT5CI0nS6VJc5Q5ComWE4fhLFEbRTnkd2YBnFgeBpNVuFsNpbxXCQABkbVPiY7WdS2-lqtEGBRAwrGagAPKo4VcOSJBujAERuhguzOrRAAMq0AKTOiQJYRGAsAbMtIA8Oit5QFgKRoDA23hC4R1gCE10gPsxrALV9V4I1yQ9SQo0ZmNL0AWqY2fPsNkCcAVxaGNlig2+iQgxi+yTIGwaPnuuTAHu0Ow0j8MkIjWzI6jD6hnSmMtjjcNAzKY14EQEA8LeeBYAAXjAR12lQ4RPSQliA6JCO2CgGAYKFIQZNEeB4LswBSwCchaPsABKEEKxgMPC6LIQC4eMO6zapTkRmwAAITvQ1TXdR1BNa2LDAS1LMty2rEUYEr7QQOSvAJmrWAhJAWmayL9v7Mb42WJNALTQbJAof+ZT+cwsjyGYZAQOg8jVJoFTCCAqhsCzIQILRWhAA).\n### Image uploads\nAdd an image upload input to a form.",
    "metadata": {
      "type": [
        "text",
        "heading"
      ],
      "path": [
        "Forms",
        "Examples",
        "Image uploads"
      ],
      "level": 3
    }
  },
  {
    "pageContent": "<path>Forms, Examples, Image uploads</path>\n```tsx\nimport { Devvit } from '@devvit/public-api';\n\nconst form = Devvit.createForm(\n  {\n    title: 'Upload an image!',\n    fields: [\n      {\n        name: 'myImage',\n        type: 'image', // This tells the form to expect an image\n        label: 'Image goes here',\n        required: true,\n      },\n    ],\n  },\n  (event, context) => {\n    const imageUrl = event.values.myImage;\n    // Use the mediaUrl to store in redis and display it in an <image> block, or send to external service to modify\n  }\n);\n```",
    "metadata": {
      "type": [
        "code"
      ],
      "level": 3,
      "path": [
        "Forms",
        "Examples",
        "Image uploads"
      ]
    }
  }
]
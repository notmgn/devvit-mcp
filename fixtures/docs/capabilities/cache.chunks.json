[
  {
    "pageContent": "<path>Cache helper, Usage</path>\n# Cache helper\nCache helper lets you build a more performant app by reducing the number of server side calls for the same data. You can create a short-term cache that stores JSON objects in your Devvit app for a limited amount of time. This is valuable when you have many clients trying to get the same data for example with a stock ticker value or with a sports score.\nUnder the covers, it's Redis plus a local in-memory write-through cache. This provides a pattern for fetching data without involving a scheduler and allows granular, small TTLs (1 second~). Cache helper lets the app make one request for the data, save the response, and provide this response to all users requesting the same data.\n:::warning **Do not cache sensitive information**. Cache helper randomly selects one user to make the real request and saves the response to the cache for others to use. You should only use cache helper for non-personalized fetches, since the same response is available to all users. :::\n## Usage\nYou need to enable [Redis](./redis.md) in order to use Cache helper.",
    "metadata": {
      "type": [
        "heading",
        "text"
      ],
      "path": [
        "Cache helper",
        "Usage"
      ],
      "level": 1
    }
  },
  {
    "pageContent": "<path>Cache helper, Example</path>\n```tsx\nDevvit.configure({\n  redis: true,\n  // other capabilities\n});\n```\n## Parameters\n| Parameters | Description |\n|---|---|\n| key | This is a string that identifies a cached response. Instead of making a real request, the app gets the cached response with the key you provide. Make sure to use different keys for different data. For example, if you’re saving post-specific data, add the postId to the cache key, like this: post_data_${postId}). |\n| ttl | Time to live is the number of milliseconds the cached response is expected to be relevant. |\nOnce it expires, the cached response will be voided and a real request is made to populate the cache again. You can treat it as a threshold, where ttl of 30000 would mean that a request is done no more than once per 30 seconds. |\n## Example\nHere’s a way to set up in-app caching instead of using scheduler or interval to fetch.\n```tsx\nimport { Devvit, useState } from '@devvit/public-api';\n\nDevvit.configure({\n  redis: true,\n  http: true, // to use `fetch()`\n  // other capabilities\n});\n\nDevvit.addCustomPostType({\n  name: 'Name',\n  render: (context) => {\n    const [data, setData] = useState({});\n\n    async function getData() {\n      const result = await context.cache(\n        async () => {\n          const response = await fetch('https://example.com');\n          if (!response.ok) {\n            throw Error(`HTTP error ${response.status}: ${response.statusText}`);\n          }\n          return await response.json();\n        },\n        {\n          key: context.userId!,\n          ttl: 10_000, // millis\n        }\n      );\n\n      setData(result);\n    }\n\n    return (\n      <blocks>\n        <button\n          onPress={() => {\n            getData();\n          }}\n        >\n          Load data\n        </button>\n\n        <text>{data.something}</text>\n      </blocks>\n    );\n  },\n});\n\nexport default Devvit;\n```",
    "metadata": {
      "type": [
        "code",
        "heading",
        "table",
        "text"
      ],
      "path": [
        "Cache helper",
        "Example"
      ],
      "level": 2
    }
  }
]